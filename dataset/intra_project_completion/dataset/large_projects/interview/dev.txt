["<s>", "public", "int", "countRangeSum", "(", "int", "[", "]", "nums", ",", "int", "lower", ",", "int", "upper", ")", "{", "TreeMap", "<", "Long", ",", "Integer", ">", "map", "=", "new", "TreeMap", "<", ">", "(", ")", ";", "Map", "<", "Long", ",", "Integer", ">", "countMap", "=", "new", "HashMap", "<", ">", "(", ")", ";", "long", "prefixSum", "[", "]", "=", "new", "long", "[", "nums", ".", "length", "+", "1", "]", ";", "map", ".", "put", "(", "0", "l", ",", "1", ")", ";", "countMap", ".", "put", "(", "0", "l", ",", "1", ")", ";", "int", "count", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "nums", ".", "length", ";", "i", "+", "+", ")", "{", "prefixSum", "[", "i", "+", "1", "]", "=", "prefixSum", "[", "i", "]", "+", "nums", "[", "i", "]", ";", "NavigableMap", "<", "Long", ",", "Integer", ">", "rangeMap", "=", "map", ".", "subMap", "(", "prefixSum", "[", "i", "+", "1", "]", "-", "upper", ",", "true", ",", "prefixSum", "[", "i", "+", "1", "]", "-", "lower", ",", "true", ")", ";", "if", "(", "rangeMap", ".", "size", "(", ")", ">", "0", ")", "{", "for", "(", "int", "c", ":", "rangeMap", ".", "values", "(", ")", ")", "{", "count", "+", "=", "c", ";", "}", "}", "if", "(", "countMap", ".", "containsKey", "(", "prefixSum", "[", "i", "+", "1", "]", ")", ")", "{", "countMap", ".", "put", "(", "prefixSum", "[", "i", "+", "1", "]", ",", "countMap", ".", "get", "(", "prefixSum", "[", "i", "+", "1", "]", ")", "+", "1", ")", ";", "}", "else", "{", "countMap", ".", "put", "(", "prefixSum", "[", "i", "+", "1", "]", ",", "1", ")", ";", "}", "map", ".", "put", "(", "prefixSum", "[", "i", "+", "1", "]", ",", "countMap", ".", "get", "(", "prefixSum", "[", "i", "+", "1", "]", ")", ")", ";", "}", "return", "count", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "CountRanges", "cr", "=", "new", "CountRanges", "(", ")", ";", "int", "[", "]", "input", "=", "{", "0", ",", "0", "}", ";", "System", ".", "out", ".", "print", "(", "cr", ".", "countRangeSum", "(", "input", ",", "0", ",", "0", ")", ")", ";", "}", "</s>"]
["<s>", "public", "void", "addNum", "(", "int", "num", ")", "{", "if", "(", "maxPq", ".", "size", "(", ")", "=", "=", "0", ")", "{", "maxPq", ".", "add", "(", "num", ")", ";", "return", ";", "}", "if", "(", "maxPq", ".", "size", "(", ")", "=", "=", "minPq", ".", "size", "(", ")", ")", "{", "if", "(", "minPq", ".", "peek", "(", ")", "<", "num", ")", "{", "maxPq", ".", "offer", "(", "minPq", ".", "poll", "(", ")", ")", ";", "minPq", ".", "offer", "(", "num", ")", ";", "}", "else", "{", "maxPq", ".", "offer", "(", "num", ")", ";", "}", "}", "else", "{", "int", "toBeOffered", "=", "0", ";", "if", "(", "num", ">", "=", "maxPq", ".", "peek", "(", ")", ")", "{", "toBeOffered", "=", "num", ";", "}", "else", "{", "toBeOffered", "=", "maxPq", ".", "poll", "(", ")", ";", "maxPq", ".", "offer", "(", "num", ")", ";", "}", "minPq", ".", "offer", "(", "toBeOffered", ")", ";", "}", "}", "</s>"]
["<s>", "public", "double", "findMedian", "(", ")", "{", "if", "(", "minPq", ".", "size", "(", ")", "=", "=", "maxPq", ".", "size", "(", ")", ")", "{", "return", "(", "(", "double", ")", "minPq", ".", "peek", "(", ")", "+", "(", "double", ")", "maxPq", ".", "peek", "(", ")", ")", "/", "<NUM_LIT:2>", ";", "}", "else", "{", "return", "maxPq", ".", "peek", "(", ")", ";", "}", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "MedianFinder", "mf", "=", "new", "MedianFinder", "(", ")", ";", "mf", ".", "addNum", "(", "<NUM_LIT:4>", ")", ";", "System", ".", "out", ".", "println", "(", "mf", ".", "findMedian", "(", ")", ")", ";", "mf", ".", "addNum", "(", "<NUM_LIT:8>", ")", ";", "System", ".", "out", ".", "println", "(", "mf", ".", "findMedian", "(", ")", ")", ";", "mf", ".", "addNum", "(", "<NUM_LIT:2>", ")", ";", "System", ".", "out", ".", "println", "(", "mf", ".", "findMedian", "(", ")", ")", ";", "mf", ".", "addNum", "(", "<NUM_LIT:11>", ")", ";", "System", ".", "out", ".", "println", "(", "mf", ".", "findMedian", "(", ")", ")", ";", "mf", ".", "addNum", "(", "<NUM_LIT>", ")", ";", "System", ".", "out", ".", "println", "(", "mf", ".", "findMedian", "(", ")", ")", ";", "mf", ".", "addNum", "(", "<NUM_LIT>", ")", ";", "System", ".", "out", ".", "println", "(", "mf", ".", "findMedian", "(", ")", ")", ";", "mf", ".", "addNum", "(", "-", "1", ")", ";", "System", ".", "out", ".", "println", "(", "mf", ".", "findMedian", "(", ")", ")", ";", "}", "</s>"]
["<s>", "public", "int", "findDuplicate", "(", "int", "[", "]", "nums", ")", "{", "if", "(", "nums", ".", "length", "=", "=", "0", "|", "|", "nums", ".", "length", "=", "=", "1", ")", "{", "return", "-", "1", ";", "}", "int", "slow", "=", "nums", "[", "0", "]", ";", "int", "fast", "=", "nums", "[", "nums", "[", "0", "]", "]", ";", "while", "(", "slow", "!", "=", "fast", ")", "{", "slow", "=", "nums", "[", "slow", "]", ";", "fast", "=", "nums", "[", "nums", "[", "fast", "]", "]", ";", "}", "fast", "=", "0", ";", "while", "(", "slow", "!", "=", "fast", ")", "{", "slow", "=", "nums", "[", "slow", "]", ";", "fast", "=", "nums", "[", "fast", "]", ";", "}", "return", "fast", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "int", "[", "]", "input", "=", "{", "<NUM_LIT:2>", ",", "1", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:4>", ",", "<NUM_LIT:3>", "}", ";", "DuplicateNumberDetection", "dd", "=", "new", "DuplicateNumberDetection", "(", ")", ";", "System", ".", "out", ".", "println", "(", "dd", ".", "findDuplicate", "(", "input", ")", ")", ";", "}", "</s>"]
["<s>", "public", "String", "shortestPalindrome", "(", "String", "s", ")", "{", "char", "[", "]", "input", "=", "createInput", "(", "s", ")", ";", "int", "val", "=", "kmp", "(", "input", ")", ";", "StringBuffer", "sb", "=", "new", "StringBuffer", "(", ")", ";", "int", "remaining", "=", "s", ".", "length", "(", ")", "-", "val", ";", "int", "i", "=", "s", ".", "length", "(", ")", "-", "1", ";", "while", "(", "remaining", ">", "0", ")", "{", "sb", ".", "append", "(", "s", ".", "charAt", "(", "i", ")", ")", ";", "i", "-", "-", ";", "remaining", "-", "-", ";", "}", "sb", ".", "append", "(", "s", ")", ";", "return", "sb", ".", "toString", "(", ")", ";", "}", "</s>"]
["<s>", "private", "int", "kmp", "(", "char", "[", "]", "input", ")", "{", "int", "T", "[", "]", "=", "new", "int", "[", "input", ".", "length", "]", ";", "int", "j", "=", "1", ";", "int", "i", "=", "0", ";", "T", "[", "0", "]", "=", "0", ";", "while", "(", "j", "<", "input", ".", "length", ")", "{", "if", "(", "input", "[", "i", "]", "=", "=", "input", "[", "j", "]", ")", "{", "T", "[", "j", "]", "=", "i", "+", "1", ";", "i", "+", "+", ";", "}", "else", "{", "while", "(", "i", "!", "=", "0", ")", "{", "i", "=", "T", "[", "i", "-", "1", "]", ";", "if", "(", "input", "[", "j", "]", "=", "=", "input", "[", "i", "]", ")", "{", "T", "[", "j", "]", "=", "i", "+", "1", ";", "i", "+", "+", ";", "break", ";", "}", "}", "}", "j", "+", "+", ";", "}", "return", "T", "[", "input", ".", "length", "-", "1", "]", ";", "}", "</s>"]
["<s>", "private", "char", "[", "]", "createInput", "(", "String", "s", ")", "{", "char", "[", "]", "input", "=", "new", "char", "[", "<NUM_LIT:2>", "*", "s", ".", "length", "(", ")", "+", "1", "]", ";", "int", "index", "=", "0", ";", "for", "(", "char", "ch", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "input", "[", "index", "+", "+", "]", "=", "ch", ";", "}", "input", "[", "index", "+", "+", "]", "=", "<CHAR_LIT>", ";", "for", "(", "int", "i", "=", "s", ".", "length", "(", ")", "-", "1", ";", "i", ">", "=", "0", ";", "i", "-", "-", ")", "{", "input", "[", "index", "+", "+", "]", "=", "s", ".", "charAt", "(", "i", ")", ";", "}", "return", "input", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "ShortestPalindrome", "sp", "=", "new", "ShortestPalindrome", "(", ")", ";", "System", ".", "out", ".", "print", "(", "sp", ".", "shortestPalindrome", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "List", "<", "String", ">", "findWords", "(", "char", "[", "]", "[", "]", "board", ",", "String", "[", "]", "words", ")", "{", "Trie", "t", "=", "new", "Trie", "(", ")", ";", "for", "(", "String", "word", ":", "words", ")", "{", "t", ".", "insert", "(", "word", ")", ";", "}", "StringBuffer", "buff", "=", "new", "StringBuffer", "(", ")", ";", "Set", "<", "String", ">", "result", "=", "new", "HashSet", "<", ">", "(", ")", ";", "Set", "<", "Integer", ">", "visited", "=", "new", "HashSet", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "board", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "board", "[", "i", "]", ".", "length", ";", "j", "+", "+", ")", "{", "findWordsUtil", "(", "board", ",", "t", ",", "i", ",", "j", ",", "buff", ",", "visited", ",", "result", ",", "board", "[", "0", "]", ".", "length", ")", ";", "}", "}", "return", "new", "ArrayList", "<", ">", "(", "result", ")", ";", "}", "</s>"]
["<s>", "private", "void", "findWordsUtil", "(", "char", "[", "]", "[", "]", "board", ",", "Trie", "t", ",", "int", "i", ",", "int", "j", ",", "StringBuffer", "buff", ",", "Set", "<", "Integer", ">", "visited", ",", "Set", "<", "String", ">", "result", ",", "int", "col", ")", "{", "if", "(", "i", "<", "0", "|", "|", "j", "<", "0", "|", "|", "i", ">", "=", "board", ".", "length", "|", "|", "j", ">", "=", "board", "[", "i", "]", ".", "length", ")", "{", "return", ";", "}", "int", "val", "=", "i", "*", "col", "+", "j", ";", "if", "(", "visited", ".", "contains", "(", "val", ")", ")", "{", "return", ";", "}", "buff", ".", "append", "(", "board", "[", "i", "]", "[", "j", "]", ")", ";", "String", "str", "=", "buff", ".", "toString", "(", ")", ";", "if", "(", "!", "t", ".", "startsWith", "(", "str", ")", ")", "{", "buff", ".", "deleteCharAt", "(", "buff", ".", "length", "(", ")", "-", "1", ")", ";", "return", ";", "}", "visited", ".", "add", "(", "val", ")", ";", "if", "(", "t", ".", "search", "(", "str", ")", ")", "{", "result", ".", "add", "(", "buff", ".", "toString", "(", ")", ")", ";", "}", "findWordsUtil", "(", "board", ",", "t", ",", "i", "+", "1", ",", "j", ",", "buff", ",", "visited", ",", "result", ",", "col", ")", ";", "findWordsUtil", "(", "board", ",", "t", ",", "i", ",", "j", "+", "1", ",", "buff", ",", "visited", ",", "result", ",", "col", ")", ";", "findWordsUtil", "(", "board", ",", "t", ",", "i", ",", "j", "-", "1", ",", "buff", ",", "visited", ",", "result", ",", "col", ")", ";", "findWordsUtil", "(", "board", ",", "t", ",", "i", "-", "1", ",", "j", ",", "buff", ",", "visited", ",", "result", ",", "col", ")", ";", "buff", ".", "deleteCharAt", "(", "buff", ".", "length", "(", ")", "-", "1", ")", ";", "visited", ".", "remove", "(", "val", ")", ";", "}", "</s>"]
["<s>", "public", "void", "printTrie", "(", ")", "{", "printTrieUtil", "(", "root", ")", ";", "}", "</s>"]
["<s>", "private", "void", "printTrieUtil", "(", "TrieNode", "root", ")", "{", "if", "(", "root", "=", "=", "null", ")", "{", "return", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "root", ".", "child", ".", "length", ";", "i", "+", "+", ")", "{", "if", "(", "root", ".", "child", "[", "i", "]", "!", "=", "null", ")", "{", "System", ".", "out", ".", "println", "(", "(", "char", ")", "(", "i", "+", "<CHAR_LIT:a>", ")", ")", ";", "printTrieUtil", "(", "root", ".", "child", "[", "i", "]", ")", ";", "}", "}", "}", "</s>"]
["<s>", "public", "boolean", "increasingTriplet", "(", "int", "[", "]", "nums", ")", "{", "int", "T", "[", "]", "=", "new", "int", "[", "<NUM_LIT:3>", "]", ";", "int", "len", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "nums", ".", "length", ";", "i", "+", "+", ")", "{", "boolean", "found", "=", "false", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "len", ";", "j", "+", "+", ")", "{", "if", "(", "T", "[", "j", "]", ">", "=", "nums", "[", "i", "]", ")", "{", "T", "[", "j", "]", "=", "nums", "[", "i", "]", ";", "found", "=", "true", ";", "break", ";", "}", "}", "if", "(", "!", "found", ")", "{", "T", "[", "len", "+", "+", "]", "=", "nums", "[", "i", "]", ";", "}", "if", "(", "len", "=", "=", "<NUM_LIT:3>", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "IncreasingTripletSubsequence", "tripletSubsequence", "=", "new", "IncreasingTripletSubsequence", "(", ")", ";", "int", "input", "[", "]", "=", "{", "<NUM_LIT:9>", ",", "<NUM_LIT:10>", ",", "-", "<NUM_LIT:2>", ",", "<NUM_LIT:12>", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:7>", ",", "-", "1", "}", ";", "System", ".", "out", ".", "print", "(", "tripletSubsequence", ".", "increasingTriplet", "(", "input", ")", ")", ";", "}", "</s>"]
["<s>", "public", "void", "combination", "(", "char", "input", "[", "]", ")", "{", "Map", "<", "Character", ",", "Integer", ">", "countMap", "=", "new", "TreeMap", "<", ">", "(", ")", ";", "for", "(", "char", "ch", ":", "input", ")", "{", "countMap", ".", "compute", "(", "ch", ",", "(", "key", ",", "val", ")", "-", ">", "{", "if", "(", "val", "=", "=", "null", ")", "{", "return", "1", ";", "}", "else", "{", "return", "val", "+", "1", ";", "}", "}", ")", ";", "}", "char", "str", "[", "]", "=", "new", "char", "[", "countMap", ".", "size", "(", ")", "]", ";", "int", "count", "[", "]", "=", "new", "int", "[", "countMap", ".", "size", "(", ")", "]", ";", "int", "index", "=", "0", ";", "for", "(", "Map", ".", "Entry", "<", "Character", ",", "Integer", ">", "entry", ":", "countMap", ".", "entrySet", "(", ")", ")", "{", "str", "[", "index", "]", "=", "entry", ".", "getKey", "(", ")", ";", "count", "[", "index", "]", "=", "entry", ".", "getValue", "(", ")", ";", "index", "+", "+", ";", "}", "char", "[", "]", "output", "=", "new", "char", "[", "input", ".", "length", "]", ";", "combination", "(", "str", ",", "count", ",", "0", ",", "output", ",", "0", ")", ";", "}", "</s>"]
["<s>", "private", "void", "combination", "(", "char", "input", "[", "]", ",", "int", "count", "[", "]", ",", "int", "pos", ",", "char", "output", "[", "]", ",", "int", "len", ")", "{", "print", "(", "output", ",", "len", ")", ";", "for", "(", "int", "i", "=", "pos", ";", "i", "<", "input", ".", "length", ";", "i", "+", "+", ")", "{", "if", "(", "count", "[", "i", "]", "=", "=", "0", ")", "{", "continue", ";", "}", "output", "[", "len", "]", "=", "input", "[", "i", "]", ";", "count", "[", "i", "]", "-", "-", ";", "combination", "(", "input", ",", "count", ",", "i", ",", "output", ",", "len", "+", "1", ")", ";", "count", "[", "i", "]", "+", "+", ";", "}", "}", "</s>"]
["<s>", "public", "void", "combinationEasy", "(", "char", "[", "]", "input", ")", "{", "List", "<", "Character", ">", "r", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "Arrays", ".", "sort", "(", "input", ")", ";", "combinationEasiest", "(", "input", ",", "0", ",", "r", ")", ";", "}", "</s>"]
["<s>", "public", "int", "nthSuperUglyNumber1", "(", "int", "n", ",", "int", "[", "]", "primes", ")", "{", "PriorityQueue", "<", "Node", ">", "pq", "=", "new", "PriorityQueue", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "primes", ".", "length", ";", "i", "+", "+", ")", "{", "pq", ".", "offer", "(", "new", "Node", "(", "i", ",", "0", ",", "primes", "[", "i", "]", ")", ")", ";", "}", "int", "[", "]", "val", "=", "new", "int", "[", "n", "]", ";", "val", "[", "0", "]", "=", "1", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", ")", "{", "Node", "node", "=", "pq", ".", "poll", "(", ")", ";", "if", "(", "val", "[", "i", "-", "1", "]", "!", "=", "node", ".", "val", ")", "{", "val", "[", "i", "]", "=", "node", ".", "val", ";", "i", "+", "+", ";", "}", "node", ".", "index", "=", "node", ".", "index", "+", "1", ";", "node", ".", "val", "=", "primes", "[", "node", ".", "inputIndex", "]", "*", "val", "[", "node", ".", "index", "]", ";", "pq", ".", "offer", "(", "node", ")", ";", "}", "return", "val", "[", "n", "-", "1", "]", ";", "}", "</s>"]
["<s>", "public", "List", "<", "String", ">", "findItinerary", "(", "String", "[", "]", "[", "]", "tickets", ")", "{", "List", "<", "Itinerary", ">", "input", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "String", "[", "]", "ticket", ":", "tickets", ")", "{", "input", ".", "add", "(", "new", "Itinerary", "(", "ticket", "[", "0", "]", ",", "ticket", "[", "1", "]", ")", ")", ";", "}", "Collections", ".", "sort", "(", "input", ")", ";", "List", "<", "String", ">", "output", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "boolean", "[", "]", "used", "=", "new", "boolean", "[", "input", ".", "size", "(", ")", "]", ";", "findItineraryUtil", "(", "input", ",", "used", ",", "\"", "<STR_LIT>", "\"", ",", "output", ",", "0", ")", ";", "return", "output", ";", "}", "</s>"]
["<s>", "boolean", "findItineraryUtil", "(", "List", "<", "Itinerary", ">", "input", ",", "boolean", "[", "]", "used", ",", "String", "end", ",", "List", "<", "String", ">", "output", ",", "int", "count", ")", "{", "if", "(", "count", "=", "=", "used", ".", "length", ")", "{", "output", ".", "add", "(", "end", ")", ";", "return", "true", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "size", "(", ")", ";", "i", "+", "+", ")", "{", "if", "(", "used", "[", "i", "]", ")", "{", "continue", ";", "}", "Itinerary", "itr", "=", "input", ".", "get", "(", "i", ")", ";", "if", "(", "itr", ".", "start", ".", "equals", "(", "end", ")", ")", "{", "output", ".", "add", "(", "itr", ".", "start", ")", ";", "used", "[", "i", "]", "=", "true", ";", "if", "(", "findItineraryUtil", "(", "input", ",", "used", ",", "itr", ".", "dest", ",", "output", ",", "count", "+", "1", ")", ")", "{", "return", "true", ";", "}", "used", "[", "i", "]", "=", "false", ";", "output", ".", "remove", "(", "output", ".", "size", "(", ")", "-", "1", ")", ";", "}", "}", "return", "false", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "String", "input", "[", "]", "[", "]", "=", "{", "{", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", "}", ",", "{", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", "}", ",", "{", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", "}", ",", "{", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", "}", "}", ";", "ReconstructItinerary", "ri", "=", "new", "ReconstructItinerary", "(", ")", ";", "List", "<", "String", ">", "output", "=", "ri", ".", "findItinerary", "(", "input", ")", ";", "output", ".", "forEach", "(", "r", "-", ">", "System", ".", "out", ".", "print", "(", "r", "+", "\"", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "List", "<", "Integer", ">", "findMinHeightTrees", "(", "int", "n", ",", "int", "[", "]", "[", "]", "edges", ")", "{", "if", "(", "n", "=", "=", "1", ")", "{", "return", "Collections", ".", "singletonList", "(", "0", ")", ";", "}", "List", "<", "Set", "<", "Integer", ">", ">", "adj", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "+", "+", ")", "{", "adj", ".", "add", "(", "new", "HashSet", "<", ">", "(", ")", ")", ";", "}", "for", "(", "int", "[", "]", "edge", ":", "edges", ")", "{", "adj", ".", "get", "(", "edge", "[", "0", "]", ")", ".", "add", "(", "edge", "[", "1", "]", ")", ";", "adj", ".", "get", "(", "edge", "[", "1", "]", ")", ".", "add", "(", "edge", "[", "0", "]", ")", ";", "}", "List", "<", "Integer", ">", "leaves", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "+", "+", ")", "{", "if", "(", "adj", ".", "get", "(", "i", ")", ".", "size", "(", ")", "=", "=", "1", ")", "{", "leaves", ".", "add", "(", "i", ")", ";", "}", "}", "while", "(", "n", ">", "<NUM_LIT:2>", ")", "{", "n", "-", "=", "leaves", ".", "size", "(", ")", ";", "List", "<", "Integer", ">", "newLeaves", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "int", "leaf", ":", "leaves", ")", "{", "int", "node", "=", "adj", ".", "get", "(", "leaf", ")", ".", "iterator", "(", ")", ".", "next", "(", ")", ";", "adj", ".", "get", "(", "node", ")", ".", "remove", "(", "leaf", ")", ";", "if", "(", "adj", ".", "get", "(", "node", ")", ".", "size", "(", ")", "=", "=", "1", ")", "{", "newLeaves", ".", "add", "(", "node", ")", ";", "}", "}", "leaves", "=", "newLeaves", ";", "}", "return", "leaves", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "MininumHeightTree", "mht", "=", "new", "MininumHeightTree", "(", ")", ";", "int", "input", "[", "]", "[", "]", "=", "{", "{", "1", ",", "0", "}", ",", "{", "1", ",", "<NUM_LIT:2>", "}", ",", "{", "1", ",", "<NUM_LIT:3>", "}", "}", ";", "List", "<", "Integer", ">", "result", "=", "mht", ".", "findMinHeightTrees", "(", "<NUM_LIT:4>", ",", "input", ")", ";", "result", ".", "forEach", "(", "r", "-", ">", "System", ".", "out", ".", "print", "(", "r", "+", "\"", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "MinumHeightTree", "mht", "=", "new", "MinumHeightTree", "(", ")", ";", "int", "input", "[", "]", "[", "]", "=", "{", "{", "1", ",", "0", "}", ",", "{", "1", ",", "<NUM_LIT:2>", "}", ",", "{", "1", ",", "<NUM_LIT:3>", "}", "}", ";", "List", "<", "Integer", ">", "result", "=", "mht", ".", "findMinHeightTrees", "(", "<NUM_LIT:4>", ",", "input", ")", ";", "result", ".", "forEach", "(", "r", "-", ">", "System", ".", "out", ".", "print", "(", "r", "+", "\"", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "MinimumHeightTree", "mht", "=", "new", "MinimumHeightTree", "(", ")", ";", "int", "input", "[", "]", "[", "]", "=", "{", "{", "1", ",", "0", "}", ",", "{", "1", ",", "<NUM_LIT:2>", "}", ",", "{", "1", ",", "<NUM_LIT:3>", "}", "}", ";", "List", "<", "Integer", ">", "result", "=", "mht", ".", "findMinHeightTrees", "(", "<NUM_LIT:4>", ",", "input", ")", ";", "result", ".", "forEach", "(", "r", "-", ">", "System", ".", "out", ".", "print", "(", "r", "+", "\"", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "List", "<", "String", ">", "findRepeatedDnaSequences", "(", "String", "s", ")", "{", "if", "(", "s", ".", "length", "(", ")", "<", "<NUM_LIT:10>", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "Set", "<", "Integer", ">", "set", "=", "new", "HashSet", "<", ">", "(", ")", ";", "int", "val", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "<NUM_LIT:10>", ";", "i", "+", "+", ")", "{", "val", "=", "add", "(", "val", ",", "s", ".", "charAt", "(", "i", ")", ")", ";", "}", "set", ".", "add", "(", "val", ")", ";", "List", "<", "String", ">", "result", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "createString", "(", "val", ")", ";", "Set", "<", "Integer", ">", "repeatSet", "=", "new", "HashSet", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "<NUM_LIT:10>", ";", "i", "<", "s", ".", "length", "(", ")", ";", "i", "+", "+", ")", "{", "val", "=", "add", "(", "val", ",", "s", ".", "charAt", "(", "i", ")", ")", ";", "if", "(", "set", ".", "contains", "(", "val", ")", "&", "&", "!", "repeatSet", ".", "contains", "(", "val", ")", ")", "{", "result", ".", "add", "(", "createString", "(", "val", ")", ")", ";", "repeatSet", ".", "add", "(", "val", ")", ";", "}", "else", "{", "set", ".", "add", "(", "val", ")", ";", "}", "}", "return", "result", ";", "}", "</s>"]
["<s>", "private", "String", "createString", "(", "int", "input", ")", "{", "StringBuffer", "sb", "=", "new", "StringBuffer", "(", ")", ";", "for", "(", "int", "i", "=", "<NUM_LIT:9>", ";", "i", ">", "=", "0", ";", "i", "-", "-", ")", "{", "sb", ".", "append", "(", "getChar", "(", "input", ">", ">", "(", "i", "*", "<NUM_LIT:2>", ")", "&", "mask1", ")", ")", ";", "}", "return", "sb", ".", "toString", "(", ")", ";", "}", "</s>"]
["<s>", "private", "int", "add", "(", "int", "input", ",", "char", "ch", ")", "{", "int", "val", "=", "getVal", "(", "ch", ")", ";", "input", "=", "input", "<", "<", "<NUM_LIT:2>", ";", "input", "=", "input", "&", "mask", ";", "return", "input", "|", "val", ";", "}", "</s>"]
["<s>", "private", "int", "getVal", "(", "char", "ch", ")", "{", "switch", "(", "ch", ")", "{", "case", "<CHAR_LIT:A>", ":", "return", "0", ";", "case", "<CHAR_LIT>", ":", "return", "1", ";", "case", "<CHAR_LIT>", ":", "return", "<NUM_LIT:2>", ";", "case", "<CHAR_LIT>", ":", "return", "<NUM_LIT:3>", ";", "default", ":", "throw", "new", "IllegalArgumentException", "(", ")", ";", "}", "}", "</s>"]
["<s>", "private", "char", "getChar", "(", "int", "val", ")", "{", "switch", "(", "val", ")", "{", "case", "0", ":", "return", "<CHAR_LIT:A>", ";", "case", "1", ":", "return", "<CHAR_LIT>", ";", "case", "<NUM_LIT:2>", ":", "return", "<CHAR_LIT>", ";", "case", "<NUM_LIT:3>", ":", "return", "<CHAR_LIT>", ";", "default", ":", "throw", "new", "IllegalArgumentException", "(", ")", ";", "}", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "RepeatedDnaSequence", "rds", "=", "new", "RepeatedDnaSequence", "(", ")", ";", "List", "<", "String", ">", "result", "=", "rds", ".", "findRepeatedDnaSequences", "(", "\"", "<STR_LIT>", "\"", ")", ";", "System", ".", "out", ".", "print", "(", "result", ")", ";", "}", "</s>"]
["<s>", "public", "int", "minPatches", "(", "int", "[", "]", "nums", ",", "int", "n", ")", "{", "int", "patch", "=", "0", ";", "long", "t", "=", "1", ";", "int", "i", "=", "0", ";", "while", "(", "t", "<", "=", "n", ")", "{", "if", "(", "i", "=", "=", "nums", ".", "length", "|", "|", "t", "<", "nums", "[", "i", "]", ")", "{", "patch", "+", "+", ";", "t", "+", "=", "t", ";", "}", "else", "{", "t", "=", "nums", "[", "i", "]", "+", "t", ";", "i", "+", "+", ";", "}", "}", "return", "patch", ";", "}", "</s>"]
["<s>", "public", "void", "inorder", "(", "Node", "root", ")", "{", "Node", "current", "=", "root", ";", "while", "(", "current", "!", "=", "null", ")", "{", "if", "(", "current", ".", "left", "=", "=", "null", ")", "{", "System", ".", "out", ".", "print", "(", "current", ".", "data", "+", "\"", "\"", ")", ";", "current", "=", "current", ".", "right", ";", "}", "else", "{", "Node", "predecessor", "=", "current", ".", "left", ";", "while", "(", "predecessor", ".", "right", "!", "=", "current", "&", "&", "predecessor", ".", "right", "!", "=", "null", ")", "{", "predecessor", "=", "predecessor", ".", "right", ";", "}", "if", "(", "predecessor", ".", "right", "=", "=", "null", ")", "{", "predecessor", ".", "right", "=", "current", ";", "current", "=", "current", ".", "left", ";", "}", "else", "{", "predecessor", ".", "right", "=", "null", ";", "System", ".", "out", ".", "print", "(", "current", ".", "data", "+", "\"", "\"", ")", ";", "current", "=", "current", ".", "right", ";", "}", "}", "}", "}", "</s>"]
["<s>", "public", "void", "preorder", "(", "Node", "root", ")", "{", "Node", "current", "=", "root", ";", "while", "(", "current", "!", "=", "null", ")", "{", "if", "(", "current", ".", "left", "=", "=", "null", ")", "{", "System", ".", "out", ".", "print", "(", "current", ".", "data", "+", "\"", "\"", ")", ";", "current", "=", "current", ".", "right", ";", "}", "else", "{", "Node", "predecessor", "=", "current", ".", "left", ";", "while", "(", "predecessor", ".", "right", "!", "=", "current", "&", "&", "predecessor", ".", "right", "!", "=", "null", ")", "{", "predecessor", "=", "predecessor", ".", "right", ";", "}", "if", "(", "predecessor", ".", "right", "=", "=", "null", ")", "{", "predecessor", ".", "right", "=", "current", ";", "System", ".", "out", ".", "print", "(", "current", ".", "data", "+", "\"", "\"", ")", ";", "current", "=", "current", ".", "left", ";", "}", "else", "{", "predecessor", ".", "right", "=", "null", ";", "current", "=", "current", ".", "right", ";", "}", "}", "}", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "BinaryTree", "bt", "=", "new", "BinaryTree", "(", ")", ";", "Node", "root", "=", "null", ";", "root", "=", "bt", ".", "addNode", "(", "<NUM_LIT:10>", ",", "root", ")", ";", "root", "=", "bt", ".", "addNode", "(", "<NUM_LIT>", ",", "root", ")", ";", "root", "=", "bt", ".", "addNode", "(", "-", "<NUM_LIT:10>", ",", "root", ")", ";", "root", "=", "bt", ".", "addNode", "(", "<NUM_LIT:7>", ",", "root", ")", ";", "root", "=", "bt", ".", "addNode", "(", "<NUM_LIT:9>", ",", "root", ")", ";", "root", "=", "bt", ".", "addNode", "(", "-", "<NUM_LIT:20>", ",", "root", ")", ";", "root", "=", "bt", ".", "addNode", "(", "<NUM_LIT:30>", ",", "root", ")", ";", "MorrisTraversal", "mt", "=", "new", "MorrisTraversal", "(", ")", ";", "mt", ".", "inorder", "(", "root", ")", ";", "System", ".", "out", ".", "println", "(", ")", ";", "mt", ".", "preorder", "(", "root", ")", ";", "}", "</s>"]
["<s>", "public", "boolean", "matchDP", "(", "char", "[", "]", "str", ",", "char", "[", "]", "pattern", ")", "{", "boolean", "T", "[", "]", "[", "]", "=", "new", "boolean", "[", "str", ".", "length", "+", "1", "]", "[", "pattern", ".", "length", "+", "1", "]", ";", "T", "[", "0", "]", "[", "0", "]", "=", "true", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "T", "[", "0", "]", ".", "length", ";", "i", "+", "+", ")", "{", "if", "(", "pattern", "[", "i", "-", "1", "]", "=", "=", "<CHAR_LIT>", ")", "{", "T", "[", "0", "]", "[", "i", "]", "=", "T", "[", "0", "]", "[", "i", "-", "<NUM_LIT:2>", "]", ";", "}", "}", "for", "(", "int", "i", "=", "1", ";", "i", "<", "T", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "1", ";", "j", "<", "T", "[", "0", "]", ".", "length", ";", "j", "+", "+", ")", "{", "if", "(", "pattern", "[", "j", "-", "1", "]", "!", "=", "<CHAR_LIT>", ")", "{", "if", "(", "pattern", "[", "j", "-", "1", "]", "=", "=", "<CHAR_LIT:.>", "|", "|", "pattern", "[", "j", "-", "1", "]", "=", "=", "str", "[", "i", "-", "1", "]", ")", "{", "T", "[", "i", "]", "[", "j", "]", "=", "T", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", ";", "}", "}", "else", "{", "if", "(", "pattern", "[", "j", "-", "<NUM_LIT:2>", "]", "=", "=", "<CHAR_LIT:.>", "|", "|", "pattern", "[", "j", "-", "<NUM_LIT:2>", "]", "=", "=", "str", "[", "i", "-", "1", "]", ")", "{", "T", "[", "i", "]", "[", "j", "]", "=", "T", "[", "i", "-", "1", "]", "[", "j", "]", ";", "}", "T", "[", "i", "]", "[", "j", "]", "=", "T", "[", "i", "]", "[", "j", "]", "|", "T", "[", "i", "]", "[", "j", "-", "<NUM_LIT:2>", "]", ";", "}", "}", "}", "return", "T", "[", "str", ".", "length", "]", "[", "pattern", ".", "length", "]", ";", "}", "</s>"]
["<s>", "public", "byte", "[", "]", "read", "(", "int", "size", ")", "{", "byte", "[", "]", "output", "=", "new", "byte", "[", "size", "]", ";", "int", "n", "=", "0", ";", "while", "(", "!", "queue", ".", "isEmpty", "(", ")", "&", "&", "n", "<", "size", ")", "{", "output", "[", "n", "+", "+", "]", "=", "queue", ".", "poll", "(", ")", ";", "}", "if", "(", "n", "=", "=", "size", ")", "{", "return", "output", ";", "}", "int", "remaining", "=", "size", "-", "n", ";", "byte", "[", "]", "b", "=", "null", ";", "while", "(", "remaining", ">", "0", ")", "{", "b", "=", "reader", ".", "read", "(", ")", ";", "copy", "(", "b", ",", "output", ",", "0", ",", "n", ",", "remaining", ">", "<NUM_LIT:4>", "?", "<NUM_LIT:4>", ":", "remaining", ")", ";", "n", "+", "=", "<NUM_LIT:4>", ";", "remaining", "-", "=", "<NUM_LIT:4>", ";", "}", "for", "(", "int", "i", "=", "<NUM_LIT:4>", "+", "remaining", ";", "i", "<", "<NUM_LIT:4>", ";", "i", "+", "+", ")", "{", "queue", ".", "offer", "(", "b", "[", "i", "]", ")", ";", "}", "return", "output", ";", "}", "</s>"]
["<s>", "private", "void", "copy", "(", "byte", "[", "]", "src", ",", "byte", "[", "]", "destination", ",", "int", "sourceStart", ",", "int", "destinationStart", ",", "int", "size", ")", "{", "int", "i", "=", "sourceStart", ";", "int", "j", "=", "destinationStart", ";", "while", "(", "i", "<", "sourceStart", "+", "size", ")", "{", "destination", "[", "j", "+", "+", "]", "=", "src", "[", "i", "+", "+", "]", ";", "}", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "Read4Function", "rf", "=", "new", "Read4Function", "(", ")", ";", "System", ".", "out", ".", "println", "(", "Arrays", ".", "toString", "(", "rf", ".", "read", "(", "<NUM_LIT:2>", ")", ")", ")", ";", "System", ".", "out", ".", "println", "(", "Arrays", ".", "toString", "(", "rf", ".", "read", "(", "1", ")", ")", ")", ";", "System", ".", "out", ".", "println", "(", "Arrays", ".", "toString", "(", "rf", ".", "read", "(", "1", ")", ")", ")", ";", "System", ".", "out", ".", "println", "(", "Arrays", ".", "toString", "(", "rf", ".", "read", "(", "<NUM_LIT:5>", ")", ")", ")", ";", "System", ".", "out", ".", "println", "(", "Arrays", ".", "toString", "(", "rf", ".", "read", "(", "<NUM_LIT:2>", ")", ")", ")", ";", "System", ".", "out", ".", "println", "(", "Arrays", ".", "toString", "(", "rf", ".", "read", "(", "<NUM_LIT:8>", ")", ")", ")", ";", "System", ".", "out", ".", "println", "(", "Arrays", ".", "toString", "(", "rf", ".", "read", "(", "<NUM_LIT:7>", ")", ")", ")", ";", "System", ".", "out", ".", "println", "(", "Arrays", ".", "toString", "(", "rf", ".", "read", "(", "<NUM_LIT>", ")", ")", ")", ";", "System", ".", "out", ".", "println", "(", "Arrays", ".", "toString", "(", "rf", ".", "read", "(", "1", ")", ")", ")", ";", "}", "</s>"]
["<s>", "boolean", "isEmpty", "(", ")", "{", "return", "count", "=", "=", "0", ";", "}", "</s>"]
["<s>", "void", "offer", "(", "byte", "b", ")", "{", "data", "[", "start", "]", "=", "b", ";", "start", "=", "(", "start", "+", "1", ")", "%", "size", ";", "count", "+", "+", ";", "}", "</s>"]
["<s>", "byte", "poll", "(", ")", "{", "byte", "d", "=", "data", "[", "end", "]", ";", "end", "=", "(", "end", "+", "1", ")", "%", "size", ";", "count", "-", "-", ";", "return", "d", ";", "}", "</s>"]
["<s>", "byte", "[", "]", "read", "(", ")", "{", "byte", "[", "]", "b", "=", "new", "byte", "[", "<NUM_LIT:4>", "]", ";", "for", "(", "int", "i", "=", "index", ";", "i", "<", "index", "+", "<NUM_LIT:4>", ";", "i", "+", "+", ")", "{", "b", "[", "i", "-", "index", "]", "=", "(", "byte", ")", "i", ";", "}", "index", "+", "=", "<NUM_LIT:4>", ";", "return", "b", ";", "}", "</s>"]
["<s>", "public", "int", "longestIncreasingPath", "(", "int", "[", "]", "[", "]", "matrix", ")", "{", "if", "(", "matrix", ".", "length", "=", "=", "0", "|", "|", "matrix", "[", "0", "]", ".", "length", "=", "=", "0", ")", "{", "return", "0", ";", "}", "int", "[", "]", "[", "]", "distance", "=", "new", "int", "[", "matrix", ".", "length", "]", "[", "matrix", "[", "0", "]", ".", "length", "]", ";", "int", "max", "=", "1", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "matrix", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "matrix", "[", "0", "]", ".", "length", ";", "j", "+", "+", ")", "{", "int", "r", "=", "dfs", "(", "matrix", ",", "i", ",", "j", ",", "distance", ",", "Integer", ".", "MIN_VALUE", ")", ";", "if", "(", "r", ">", "max", ")", "{", "max", "=", "r", ";", "}", "}", "}", "return", "max", ";", "}", "</s>"]
["<s>", "int", "dfs", "(", "int", "[", "]", "[", "]", "matrix", ",", "int", "i", ",", "int", "j", ",", "int", "[", "]", "[", "]", "distance", ",", "int", "prev", ")", "{", "if", "(", "i", "<", "0", "|", "|", "i", ">", "=", "matrix", ".", "length", "|", "|", "j", "<", "0", "|", "|", "j", ">", "=", "matrix", "[", "i", "]", ".", "length", ")", "{", "return", "0", ";", "}", "if", "(", "matrix", "[", "i", "]", "[", "j", "]", "<", "=", "prev", ")", "{", "return", "0", ";", "}", "if", "(", "distance", "[", "i", "]", "[", "j", "]", "!", "=", "0", ")", "{", "return", "distance", "[", "i", "]", "[", "j", "]", ";", "}", "int", "v1", "=", "dfs", "(", "matrix", ",", "i", "-", "1", ",", "j", ",", "distance", ",", "matrix", "[", "i", "]", "[", "j", "]", ")", ";", "int", "v2", "=", "dfs", "(", "matrix", ",", "i", ",", "j", "-", "1", ",", "distance", ",", "matrix", "[", "i", "]", "[", "j", "]", ")", ";", "int", "v3", "=", "dfs", "(", "matrix", ",", "i", "+", "1", ",", "j", ",", "distance", ",", "matrix", "[", "i", "]", "[", "j", "]", ")", ";", "int", "v4", "=", "dfs", "(", "matrix", ",", "i", ",", "j", "+", "1", ",", "distance", ",", "matrix", "[", "i", "]", "[", "j", "]", ")", ";", "distance", "[", "i", "]", "[", "j", "]", "=", "1", "+", "Math", ".", "max", "(", "Math", ".", "max", "(", "v1", ",", "v2", ")", ",", "Math", ".", "max", "(", "v3", ",", "v4", ")", ")", ";", "return", "distance", "[", "i", "]", "[", "j", "]", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "LongestIncreasingPath", "lip", "=", "new", "LongestIncreasingPath", "(", ")", ";", "int", "[", "]", "[", "]", "input", "=", "{", "{", "<NUM_LIT:9>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:4>", "}", ",", "{", "<NUM_LIT:6>", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:8>", "}", ",", "{", "<NUM_LIT:2>", ",", "1", ",", "1", "}", "}", ";", "int", "[", "]", "[", "]", "input1", "=", "{", "{", "<NUM_LIT:3>", ",", "<NUM_LIT:4>", ",", "<NUM_LIT:5>", "}", ",", "{", "<NUM_LIT:3>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:6>", "}", ",", "{", "<NUM_LIT:2>", ",", "<NUM_LIT:2>", ",", "1", "}", "}", ";", "System", ".", "out", ".", "println", "(", "lip", ".", "longestIncreasingPath", "(", "input", ")", ")", ";", "}", "</s>"]
["<s>", "public", "int", "sumRegion", "(", "int", "row1", ",", "int", "col1", ",", "int", "row2", ",", "int", "col2", ")", "{", "row1", "+", "+", ";", "col1", "+", "+", ";", "row2", "+", "+", ";", "col2", "+", "+", ";", "return", "T", "[", "row2", "]", "[", "col2", "]", "-", "T", "[", "row1", "-", "1", "]", "[", "col2", "]", "-", "T", "[", "row2", "]", "[", "col1", "-", "1", "]", "+", "T", "[", "row1", "-", "1", "]", "[", "col1", "-", "1", "]", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "int", "[", "]", "[", "]", "input", "=", "{", "{", "<NUM_LIT:3>", ",", "0", ",", "1", ",", "<NUM_LIT:4>", ",", "<NUM_LIT:2>", "}", ",", "{", "<NUM_LIT:5>", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:2>", ",", "1", "}", ",", "{", "1", ",", "<NUM_LIT:2>", ",", "0", ",", "1", ",", "<NUM_LIT:5>", "}", ",", "{", "<NUM_LIT:4>", ",", "1", ",", "0", ",", "1", ",", "<NUM_LIT:7>", "}", ",", "{", "1", ",", "0", ",", "<NUM_LIT:3>", ",", "0", ",", "<NUM_LIT:5>", "}", "}", ";", "Immutable2DSumRangeQuery", "isr", "=", "new", "Immutable2DSumRangeQuery", "(", "input", ")", ";", "System", ".", "out", ".", "println", "(", "isr", ".", "sumRegion", "(", "1", ",", "1", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:2>", ")", ")", ";", "}", "</s>"]
["<s>", "public", "String", "serialize", "(", "Node", "root", ")", "{", "StringBuffer", "buff", "=", "new", "StringBuffer", "(", ")", ";", "serializeUtil", "(", "root", ",", "buff", ")", ";", "return", "buff", ".", "toString", "(", ")", ";", "}", "</s>"]
["<s>", "private", "void", "serializeUtil", "(", "Node", "root", ",", "StringBuffer", "buff", ")", "{", "if", "(", "root", "=", "=", "null", ")", "{", "buff", ".", "append", "(", "\"", "<STR_LIT>", "\"", ")", ";", "return", ";", "}", "buff", ".", "append", "(", "root", ".", "data", ")", ".", "append", "(", "\"", "<STR_LIT:U+002C>", "\"", ")", ";", "if", "(", "root", ".", "left", "!", "=", "null", "|", "|", "root", ".", "right", "!", "=", "null", ")", "{", "buff", ".", "append", "(", "\"", "<STR_LIT>", "\"", ")", ";", "serializeUtil", "(", "root", ".", "left", ",", "buff", ")", ";", "serializeUtil", "(", "root", ".", "right", ",", "buff", ")", ";", "}", "else", "{", "return", ";", "}", "}", "</s>"]
["<s>", "public", "Node", "deserialize", "(", "String", "data", ")", "{", "String", "[", "]", "input", "=", "data", ".", "split", "(", "\"", "<STR_LIT:U+002C>", "\"", ")", ";", "index", "=", "0", ";", "return", "deserializeUtil", "(", "input", ")", ";", "}", "</s>"]
["<s>", "public", "Node", "deserializeUtil", "(", "String", "input", "[", "]", ")", "{", "if", "(", "index", "=", "=", "input", ".", "length", ")", "{", "return", "null", ";", "}", "if", "(", "input", "[", "index", "]", ".", "equals", "(", "\"", "<STR_LIT:%>", "\"", ")", ")", "{", "index", "+", "+", ";", "return", "null", ";", "}", "Node", "n", "=", "new", "Node", "(", ")", ";", "n", ".", "data", "=", "Integer", ".", "parseInt", "(", "input", "[", "index", "]", ")", ";", "if", "(", "index", "<", "input", ".", "length", "-", "1", ")", "{", "if", "(", "input", "[", "index", "+", "1", "]", ".", "equals", "(", "\"", "<STR_LIT:$>", "\"", ")", ")", "{", "index", "+", "=", "<NUM_LIT:2>", ";", "n", ".", "left", "=", "deserializeUtil", "(", "input", ")", ";", "n", ".", "right", "=", "deserializeUtil", "(", "input", ")", ";", "}", "else", "{", "index", "+", "+", ";", "}", "}", "return", "n", ";", "}", "</s>"]
["<s>", "void", "update", "(", "int", "val", ")", "{", "if", "(", "!", "isSet", ")", "{", "low", "=", "val", ";", "high", "=", "val", ";", "isSet", "=", "true", ";", "}", "else", "{", "low", "=", "Math", ".", "min", "(", "low", ",", "val", ")", ";", "high", "=", "Math", ".", "max", "(", "high", ",", "val", ")", ";", "}", "}", "</s>"]
["<s>", "public", "int", "maximumGap", "(", "int", "[", "]", "input", ")", "{", "if", "(", "input", "=", "=", "null", "|", "|", "input", ".", "length", "<", "<NUM_LIT:2>", ")", "{", "return", "0", ";", "}", "int", "min", "=", "Integer", ".", "MAX_VALUE", ";", "int", "max", "=", "Integer", ".", "MIN_VALUE", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "length", ";", "i", "+", "+", ")", "{", "min", "=", "Math", ".", "min", "(", "min", ",", "input", "[", "i", "]", ")", ";", "max", "=", "Math", ".", "max", "(", "max", ",", "input", "[", "i", "]", ")", ";", "}", "int", "gap", "=", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "(", "max", "-", "min", ")", "/", "(", "input", ".", "length", "-", "1", ")", ")", ";", "Bucket", "[", "]", "buckets", "=", "new", "Bucket", "[", "input", ".", "length", "-", "1", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "buckets", ".", "length", ";", "i", "+", "+", ")", "{", "buckets", "[", "i", "]", "=", "new", "Bucket", "(", ")", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "length", ";", "i", "+", "+", ")", "{", "if", "(", "input", "[", "i", "]", "=", "=", "max", "|", "|", "input", "[", "i", "]", "=", "=", "min", ")", "{", "continue", ";", "}", "buckets", "[", "(", "input", "[", "i", "]", "-", "min", ")", "/", "gap", "]", ".", "update", "(", "input", "[", "i", "]", ")", ";", "}", "int", "prev", "=", "min", ";", "int", "maxGap", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "buckets", ".", "length", ";", "i", "+", "+", ")", "{", "if", "(", "!", "buckets", "[", "i", "]", ".", "isSet", ")", "{", "continue", ";", "}", "maxGap", "=", "Math", ".", "max", "(", "maxGap", ",", "buckets", "[", "i", "]", ".", "low", "-", "prev", ")", ";", "prev", "=", "buckets", "[", "i", "]", ".", "high", ";", "}", "return", "Math", ".", "max", "(", "maxGap", ",", "max", "-", "prev", ")", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "int", "[", "]", "input", "=", "{", "<NUM_LIT:4>", ",", "<NUM_LIT:3>", ",", "<NUM_LIT>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:7>", "}", ";", "MaximumGap", "mg", "=", "new", "MaximumGap", "(", ")", ";", "System", ".", "out", ".", "println", "(", "mg", ".", "maxGap", "(", "input", ")", ")", ";", "}", "</s>"]
["<s>", "public", "int", "longestConsecutive", "(", "int", "[", "]", "nums", ")", "{", "Map", "<", "Integer", ",", "Integer", ">", "map", "=", "new", "HashMap", "<", "Integer", ",", "Integer", ">", "(", ")", ";", "int", "result", "=", "1", ";", "for", "(", "int", "i", ":", "nums", ")", "{", "if", "(", "map", ".", "containsKey", "(", "i", ")", ")", "{", "continue", ";", "}", "int", "left", "=", "map", ".", "containsKey", "(", "i", "-", "1", ")", "?", "map", ".", "get", "(", "i", "-", "1", ")", ":", "0", ";", "int", "right", "=", "map", ".", "containsKey", "(", "i", "+", "1", ")", "?", "map", ".", "get", "(", "i", "+", "1", ")", ":", "0", ";", "int", "sum", "=", "left", "+", "right", "+", "1", ";", "map", ".", "put", "(", "i", ",", "sum", ")", ";", "result", "=", "Math", ".", "max", "(", "sum", ",", "result", ")", ";", "map", ".", "put", "(", "i", "-", "left", ",", "sum", ")", ";", "map", ".", "put", "(", "i", "+", "right", ",", "sum", ")", ";", "}", "return", "result", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "LongestConsecutiveSubsequence", "lcs", "=", "new", "LongestConsecutiveSubsequence", "(", ")", ";", "int", "[", "]", "input", "=", "{", "<NUM_LIT:100>", ",", "<NUM_LIT:4>", ",", "<NUM_LIT>", ",", "1", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:2>", "}", ";", "System", ".", "out", ".", "println", "(", "lcs", ".", "longestConsecutive", "(", "input", ")", ")", ";", "}", "</s>"]
["<s>", "public", "List", "<", "Integer", ">", "grayCode", "(", "int", "n", ")", "{", "List", "<", "Integer", ">", "result", "=", "new", "LinkedList", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "1", "<", "<", "n", ";", "i", "+", "+", ")", "{", "result", ".", "add", "(", "i", "^", "i", ">", ">", "1", ")", ";", "}", "return", "result", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "GrayCode", "gc", "=", "new", "GrayCode", "(", ")", ";", "System", ".", "out", ".", "println", "(", "gc", ".", "grayCode", "(", "<NUM_LIT:4>", ")", ")", ";", "}", "</s>"]
["<s>", "public", "String", "serializeLevelOrder", "(", "Node", "root", ")", "{", "if", "(", "root", "=", "=", "null", ")", "{", "return", "\"", "\"", ";", "}", "Deque", "<", "Node", ">", "queue", "=", "new", "LinkedList", "<", ">", "(", ")", ";", "queue", ".", "offerFirst", "(", "root", ")", ";", "StringBuffer", "buff", "=", "new", "StringBuffer", "(", ")", ";", "while", "(", "!", "queue", ".", "isEmpty", "(", ")", ")", "{", "root", "=", "queue", ".", "pollFirst", "(", ")", ";", "if", "(", "root", "=", "=", "null", ")", "{", "buff", ".", "append", "(", "\"", "<STR_LIT>", "\"", ")", ";", "}", "else", "{", "buff", ".", "append", "(", "root", ".", "data", ")", ".", "append", "(", "\"", "<STR_LIT:U+002C>", "\"", ")", ";", "queue", ".", "offer", "(", "root", ".", "left", ")", ";", "queue", ".", "offer", "(", "root", ".", "right", ")", ";", "}", "}", "for", "(", "int", "i", "=", "buff", ".", "length", "(", ")", "-", "1", ";", "i", ">", "=", "0", ";", "i", "-", "-", ")", "{", "if", "(", "buff", ".", "charAt", "(", "i", ")", "=", "=", "<CHAR_LIT>", "|", "|", "buff", ".", "charAt", "(", "i", ")", "=", "=", "<CHAR_LIT:U+002C>", ")", "{", "buff", ".", "deleteCharAt", "(", "i", ")", ";", "}", "else", "{", "break", ";", "}", "}", "return", "buff", ".", "toString", "(", ")", ";", "}", "</s>"]
["<s>", "public", "Node", "deserializeLevelOrder", "(", "String", "data", ")", "{", "if", "(", "data", "=", "=", "null", "|", "|", "data", ".", "length", "(", ")", "=", "=", "0", ")", "{", "return", "null", ";", "}", "String", "[", "]", "input", "=", "data", ".", "split", "(", "\"", "<STR_LIT:U+002C>", "\"", ")", ";", "Deque", "<", "Node", ">", "queue", "=", "new", "LinkedList", "<", ">", "(", ")", ";", "int", "index", "=", "0", ";", "queue", ".", "offerFirst", "(", "Node", ".", "newNode", "(", "Integer", ".", "parseInt", "(", "input", "[", "index", "]", ")", ")", ")", ";", "Node", "root", "=", "queue", ".", "peekFirst", "(", ")", ";", "index", "+", "+", ";", "while", "(", "!", "queue", ".", "isEmpty", "(", ")", ")", "{", "Node", "current", "=", "queue", ".", "pollFirst", "(", ")", ";", "if", "(", "index", "<", "input", ".", "length", "&", "&", "!", "input", "[", "index", "]", ".", "equals", "(", "\"", "<STR_LIT:%>", "\"", ")", ")", "{", "current", ".", "left", "=", "Node", ".", "newNode", "(", "Integer", ".", "parseInt", "(", "input", "[", "index", "]", ")", ")", ";", "queue", ".", "offerLast", "(", "current", ".", "left", ")", ";", "}", "index", "+", "+", ";", "if", "(", "index", "<", "input", ".", "length", "&", "&", "!", "input", "[", "index", "]", ".", "equals", "(", "\"", "<STR_LIT:%>", "\"", ")", ")", "{", "current", ".", "right", "=", "Node", ".", "newNode", "(", "Integer", ".", "parseInt", "(", "input", "[", "index", "]", ")", ")", ";", "queue", ".", "offerLast", "(", "current", ".", "right", ")", ";", "}", "index", "+", "+", ";", "}", "return", "root", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "SerializeDeserializeBinaryTree", "sd", "=", "new", "SerializeDeserializeBinaryTree", "(", ")", ";", "Node", "node", "=", "sd", ".", "deserialize", "(", "\"", "<STR_LIT>", "\"", ")", ";", "TreeTraversals", "tt", "=", "new", "TreeTraversals", "(", ")", ";", "tt", ".", "inOrder", "(", "node", ")", ";", "String", "serializedTree", "=", "sd", ".", "serializeLevelOrder", "(", "node", ")", ";", "Node", "root", "=", "sd", ".", "deserializeLevelOrder", "(", "\"", "<STR_LIT>", "\"", ")", ";", "tt", ".", "inOrder", "(", "root", ")", ";", "}", "</s>"]
["<s>", "public", "List", "<", "String", ">", "wordBreakTopDown", "(", "String", "s", ",", "Set", "<", "String", ">", "wordDict", ")", "{", "Map", "<", "Integer", ",", "List", "<", "String", ">", ">", "dp", "=", "new", "HashMap", "<", ">", "(", ")", ";", "int", "max", "=", "0", ";", "for", "(", "String", "s1", ":", "wordDict", ")", "{", "max", "=", "Math", ".", "max", "(", "max", ",", "s1", ".", "length", "(", ")", ")", ";", "}", "return", "wordBreakUtil", "(", "s", ",", "wordDict", ",", "dp", ",", "0", ",", "max", ")", ";", "}", "</s>"]
["<s>", "private", "List", "<", "String", ">", "wordBreakUtil", "(", "String", "s", ",", "Set", "<", "String", ">", "dict", ",", "Map", "<", "Integer", ",", "List", "<", "String", ">", ">", "dp", ",", "int", "start", ",", "int", "max", ")", "{", "if", "(", "start", "=", "=", "s", ".", "length", "(", ")", ")", "{", "return", "Collections", ".", "singletonList", "(", "\"", "\"", ")", ";", "}", "if", "(", "dp", ".", "containsKey", "(", "start", ")", ")", "{", "return", "dp", ".", "get", "(", "start", ")", ";", "}", "List", "<", "String", ">", "words", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "start", ";", "i", "<", "start", "+", "max", "&", "&", "i", "<", "s", ".", "length", "(", ")", ";", "i", "+", "+", ")", "{", "String", "newWord", "=", "s", ".", "substring", "(", "start", ",", "i", "+", "1", ")", ";", "if", "(", "!", "dict", ".", "contains", "(", "newWord", ")", ")", "{", "continue", ";", "}", "List", "<", "String", ">", "result", "=", "wordBreakUtil", "(", "s", ",", "dict", ",", "dp", ",", "i", "+", "1", ",", "max", ")", ";", "for", "(", "String", "word", ":", "result", ")", "{", "String", "extraSpace", "=", "word", ".", "length", "(", ")", "=", "=", "0", "?", "\"", "\"", ":", "\"", "\"", ";", "words", ".", "add", "(", "newWord", "+", "extraSpace", "+", "word", ")", ";", "}", "}", "dp", ".", "put", "(", "start", ",", "words", ")", ";", "return", "words", ";", "}", "</s>"]
["<s>", "public", "boolean", "wordBreakTopDownOneSolution", "(", "String", "s", ",", "Set", "<", "String", ">", "wordDict", ")", "{", "Map", "<", "Integer", ",", "Boolean", ">", "dp", "=", "new", "HashMap", "<", ">", "(", ")", ";", "int", "max", "=", "0", ";", "for", "(", "String", "s1", ":", "wordDict", ")", "{", "max", "=", "Math", ".", "max", "(", "max", ",", "s1", ".", "length", "(", ")", ")", ";", "}", "return", "wordBreakTopDownOneSolutionUtil", "(", "s", ",", "wordDict", ",", "0", ",", "max", ",", "dp", ")", ";", "}", "</s>"]
["<s>", "private", "boolean", "wordBreakTopDownOneSolutionUtil", "(", "String", "s", ",", "Set", "<", "String", ">", "dict", ",", "int", "start", ",", "int", "max", ",", "Map", "<", "Integer", ",", "Boolean", ">", "dp", ")", "{", "if", "(", "start", "=", "=", "s", ".", "length", "(", ")", ")", "{", "return", "true", ";", "}", "if", "(", "dp", ".", "containsKey", "(", "start", ")", ")", "{", "return", "dp", ".", "get", "(", "start", ")", ";", "}", "for", "(", "int", "i", "=", "start", ";", "i", "<", "start", "+", "max", "&", "&", "i", "<", "s", ".", "length", "(", ")", ";", "i", "+", "+", ")", "{", "String", "newWord", "=", "s", ".", "substring", "(", "start", ",", "i", "+", "1", ")", ";", "if", "(", "!", "dict", ".", "contains", "(", "newWord", ")", ")", "{", "continue", ";", "}", "if", "(", "wordBreakTopDownOneSolutionUtil", "(", "s", ",", "dict", ",", "i", "+", "1", ",", "max", ",", "dp", ")", ")", "{", "dp", ".", "put", "(", "start", ",", "true", ")", ";", "return", "true", ";", "}", "}", "dp", ".", "put", "(", "start", ",", "false", ")", ";", "return", "false", ";", "}", "</s>"]
["<s>", "public", "double", "powerUsingBit", "(", "double", "x", ",", "int", "n", ")", "{", "if", "(", "n", "=", "=", "0", ")", "{", "return", "1", ";", "}", "long", "r", "=", "n", ";", "if", "(", "r", "<", "0", ")", "{", "x", "=", "1", "/", "x", ";", "r", "=", "-", "r", ";", "}", "double", "power", "=", "x", ";", "double", "result", "=", "x", ";", "double", "result1", "=", "1", ";", "while", "(", "r", ">", "1", ")", "{", "result", "*", "=", "result", ";", "if", "(", "(", "r", "&", "1", ")", "!", "=", "0", ")", "{", "result1", "=", "result1", "*", "power", ";", "}", "r", "=", "r", ">", ">", "1", ";", "power", "=", "power", "*", "power", ";", "}", "return", "result", "*", "result1", ";", "}", "</s>"]
["<s>", "public", "int", "numDistinct", "(", "String", "s", ",", "String", "t", ")", "{", "if", "(", "s", ".", "length", "(", ")", "=", "=", "0", "|", "|", "t", ".", "length", "(", ")", "=", "=", "0", ")", "{", "return", "0", ";", "}", "int", "[", "]", "[", "]", "T", "=", "new", "int", "[", "t", ".", "length", "(", ")", "+", "1", "]", "[", "s", ".", "length", "(", ")", "+", "1", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "T", "[", "0", "]", ".", "length", ";", "i", "+", "+", ")", "{", "T", "[", "0", "]", "[", "i", "]", "=", "1", ";", "}", "for", "(", "int", "i", "=", "1", ";", "i", "<", "T", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "1", ";", "j", "<", "T", "[", "0", "]", ".", "length", ";", "j", "+", "+", ")", "{", "if", "(", "s", ".", "charAt", "(", "j", "-", "1", ")", "=", "=", "t", ".", "charAt", "(", "i", "-", "1", ")", ")", "{", "T", "[", "i", "]", "[", "j", "]", "=", "T", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "+", "T", "[", "i", "]", "[", "j", "-", "1", "]", ";", "}", "else", "{", "T", "[", "i", "]", "[", "j", "]", "=", "T", "[", "i", "]", "[", "j", "-", "1", "]", ";", "}", "}", "}", "return", "T", "[", "t", ".", "length", "(", ")", "]", "[", "s", ".", "length", "(", ")", "]", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "DistinctSubsequence", "ds", "=", "new", "DistinctSubsequence", "(", ")", ";", "System", ".", "out", ".", "println", "(", "ds", ".", "numDistinct", "(", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "int", "maxPoints", "(", "Point", "[", "]", "points", ")", "{", "int", "result", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "points", ".", "length", ";", "i", "+", "+", ")", "{", "Map", "<", "Pair", ",", "Integer", ">", "map", "=", "new", "HashMap", "<", ">", "(", ")", ";", "int", "verticalLine", "=", "1", ";", "int", "onePointMax", "=", "1", ";", "int", "samePoint", "=", "0", ";", "for", "(", "int", "j", "=", "i", "+", "1", ";", "j", "<", "points", ".", "length", ";", "j", "+", "+", ")", "{", "if", "(", "points", "[", "i", "]", ".", "x", "=", "=", "points", "[", "j", "]", ".", "x", "&", "&", "points", "[", "i", "]", ".", "y", "=", "=", "points", "[", "j", "]", ".", "y", ")", "{", "samePoint", "+", "+", ";", "}", "else", "if", "(", "points", "[", "i", "]", ".", "x", "=", "=", "points", "[", "j", "]", ".", "x", ")", "{", "verticalLine", "+", "+", ";", "onePointMax", "=", "Math", ".", "max", "(", "onePointMax", ",", "verticalLine", ")", ";", "}", "else", "{", "int", "gcd", "=", "gcd", "(", "points", "[", "i", "]", ".", "y", "-", "points", "[", "j", "]", ".", "y", ",", "points", "[", "i", "]", ".", "x", "-", "points", "[", "j", "]", ".", "x", ")", ";", "Pair", "p", "=", "new", "Pair", "(", ")", ";", "p", ".", "a", "=", "(", "points", "[", "i", "]", ".", "y", "-", "points", "[", "j", "]", ".", "y", ")", "/", "gcd", ";", "p", ".", "b", "=", "(", "points", "[", "i", "]", ".", "x", "-", "points", "[", "j", "]", ".", "x", ")", "/", "gcd", ";", "int", "count", "=", "<NUM_LIT:2>", ";", "if", "(", "map", ".", "containsKey", "(", "p", ")", ")", "{", "count", "=", "map", ".", "get", "(", "p", ")", ";", "count", "+", "+", ";", "map", ".", "put", "(", "p", ",", "count", ")", ";", "}", "else", "{", "map", ".", "put", "(", "p", ",", "count", ")", ";", "}", "onePointMax", "=", "Math", ".", "max", "(", "onePointMax", ",", "count", ")", ";", "}", "}", "result", "=", "Math", ".", "max", "(", "result", ",", "onePointMax", "+", "samePoint", ")", ";", "}", "return", "result", ";", "}", "</s>"]
["<s>", "int", "gcd", "(", "int", "a", ",", "int", "b", ")", "{", "if", "(", "b", "=", "=", "0", ")", "return", "a", ";", "else", "return", "gcd", "(", "b", ",", "a", "%", "b", ")", ";", "}", "</s>"]
["<s>", "public", "int", "calculateMinimumHP", "(", "int", "[", "]", "[", "]", "dungeon", ")", "{", "if", "(", "dungeon", ".", "length", "=", "=", "0", "|", "|", "dungeon", "[", "0", "]", ".", "length", "=", "=", "0", ")", "{", "return", "0", ";", "}", "int", "[", "]", "[", "]", "health", "=", "new", "int", "[", "dungeon", ".", "length", "]", "[", "dungeon", "[", "0", "]", ".", "length", "]", ";", "int", "m", "=", "dungeon", ".", "length", "-", "1", ";", "int", "n", "=", "dungeon", "[", "0", "]", ".", "length", "-", "1", ";", "health", "[", "m", "]", "[", "n", "]", "=", "Math", ".", "max", "(", "1", "-", "dungeon", "[", "m", "]", "[", "n", "]", ",", "1", ")", ";", "for", "(", "int", "i", "=", "m", "-", "1", ";", "i", ">", "=", "0", ";", "i", "-", "-", ")", "{", "health", "[", "i", "]", "[", "n", "]", "=", "Math", ".", "max", "(", "health", "[", "i", "+", "1", "]", "[", "n", "]", "-", "dungeon", "[", "i", "]", "[", "n", "]", ",", "1", ")", ";", "}", "for", "(", "int", "i", "=", "n", "-", "1", ";", "i", ">", "=", "0", ";", "i", "-", "-", ")", "{", "health", "[", "m", "]", "[", "i", "]", "=", "Math", ".", "max", "(", "health", "[", "m", "]", "[", "i", "+", "1", "]", "-", "dungeon", "[", "m", "]", "[", "i", "]", ",", "1", ")", ";", "}", "for", "(", "int", "i", "=", "m", "-", "1", ";", "i", ">", "=", "0", ";", "i", "-", "-", ")", "{", "for", "(", "int", "j", "=", "n", "-", "1", ";", "j", ">", "=", "0", ";", "j", "-", "-", ")", "{", "health", "[", "i", "]", "[", "j", "]", "=", "Math", ".", "min", "(", "Math", ".", "max", "(", "health", "[", "i", "+", "1", "]", "[", "j", "]", "-", "dungeon", "[", "i", "]", "[", "j", "]", ",", "1", ")", ",", "Math", ".", "max", "(", "health", "[", "i", "]", "[", "j", "+", "1", "]", "-", "dungeon", "[", "i", "]", "[", "j", "]", ",", "1", ")", ")", ";", "}", "}", "return", "health", "[", "0", "]", "[", "0", "]", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "DungeonGame", "dg", "=", "new", "DungeonGame", "(", ")", ";", "int", "[", "]", "[", "]", "dungeon", "=", "{", "{", "-", "<NUM_LIT:2>", ",", "-", "<NUM_LIT:3>", ",", "<NUM_LIT:3>", "}", ",", "{", "-", "<NUM_LIT:5>", ",", "-", "<NUM_LIT:10>", ",", "1", "}", ",", "{", "<NUM_LIT:10>", ",", "<NUM_LIT:30>", ",", "-", "<NUM_LIT:30>", "}", "}", ";", "System", ".", "out", ".", "print", "(", "dg", ".", "calculateMinimumHP", "(", "dungeon", ")", ")", ";", "}", "</s>"]
["<s>", "public", "List", "<", "Interval", ">", "insertBinarySearchBased", "(", "List", "<", "Interval", ">", "intervals", ",", "Interval", "newInterval", ")", "{", "if", "(", "intervals", ".", "size", "(", ")", "=", "=", "0", ")", "{", "return", "Collections", ".", "singletonList", "(", "newInterval", ")", ";", "}", "if", "(", "newInterval", ".", "start", ">", "intervals", ".", "get", "(", "intervals", ".", "size", "(", ")", "-", "1", ")", ".", "end", ")", "{", "intervals", ".", "add", "(", "newInterval", ")", ";", "return", "intervals", ";", "}", "if", "(", "newInterval", ".", "end", "<", "intervals", ".", "get", "(", "0", ")", ".", "start", ")", "{", "intervals", ".", "add", "(", "0", ",", "newInterval", ")", ";", "return", "intervals", ";", "}", "BinarySearchResult", "bsr1", "=", "search", "(", "intervals", ",", "newInterval", ".", "start", ")", ";", "BinarySearchResult", "bsr2", "=", "search", "(", "intervals", ",", "newInterval", ".", "end", ")", ";", "System", ".", "out", ".", "println", "(", "bsr1", ".", "low", "+", "\"", "\"", "+", "bsr1", ".", "high", ")", ";", "System", ".", "out", ".", "println", "(", "bsr2", ".", "low", "+", "\"", "\"", "+", "bsr2", ".", "high", ")", ";", "List", "<", "Interval", ">", "result", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "int", "low1", "=", "bsr1", ".", "low", "=", "=", "bsr1", ".", "high", "?", "bsr1", ".", "low", "-", "1", ":", "bsr1", ".", "low", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "=", "low1", ";", "i", "+", "+", ")", "{", "result", ".", "add", "(", "intervals", ".", "get", "(", "i", ")", ")", ";", "}", "if", "(", "bsr1", ".", "low", "=", "=", "bsr1", ".", "high", "&", "&", "bsr2", ".", "low", "=", "=", "bsr2", ".", "high", ")", "{", "result", ".", "add", "(", "new", "Interval", "(", "intervals", ".", "get", "(", "bsr1", ".", "low", ")", ".", "start", ",", "intervals", ".", "get", "(", "bsr2", ".", "high", ")", ".", "end", ")", ")", ";", "}", "else", "if", "(", "bsr1", ".", "low", "!", "=", "bsr1", ".", "high", "&", "&", "bsr2", ".", "low", "=", "=", "bsr2", ".", "high", ")", "{", "result", ".", "add", "(", "new", "Interval", "(", "newInterval", ".", "start", ",", "intervals", ".", "get", "(", "bsr2", ".", "high", ")", ".", "end", ")", ")", ";", "}", "else", "if", "(", "bsr1", ".", "low", "=", "=", "bsr1", ".", "high", "&", "&", "bsr2", ".", "low", "!", "=", "bsr2", ".", "high", ")", "{", "result", ".", "add", "(", "new", "Interval", "(", "intervals", ".", "get", "(", "bsr1", ".", "low", ")", ".", "start", ",", "newInterval", ".", "end", ")", ")", ";", "}", "else", "{", "result", ".", "add", "(", "newInterval", ")", ";", "}", "int", "high", "=", "bsr2", ".", "low", "=", "=", "bsr2", ".", "high", "?", "bsr2", ".", "high", "+", "1", ":", "bsr2", ".", "high", ";", "for", "(", "int", "i", "=", "high", ";", "i", "<", "intervals", ".", "size", "(", ")", ";", "i", "+", "+", ")", "{", "result", ".", "add", "(", "intervals", ".", "get", "(", "i", ")", ")", ";", "}", "return", "result", ";", "}", "</s>"]
["<s>", "private", "BinarySearchResult", "search", "(", "List", "<", "Interval", ">", "intervals", ",", "int", "val", ")", "{", "int", "start", "=", "0", ";", "int", "end", "=", "intervals", ".", "size", "(", ")", "-", "1", ";", "BinarySearchResult", "bsr", "=", "new", "BinarySearchResult", "(", ")", ";", "while", "(", "start", "<", "=", "end", ")", "{", "int", "middle", "=", "(", "start", "+", "end", ")", "/", "<NUM_LIT:2>", ";", "Interval", "middleInterval", "=", "intervals", ".", "get", "(", "middle", ")", ";", "if", "(", "middleInterval", ".", "end", ">", "=", "val", "&", "&", "middleInterval", ".", "start", "<", "=", "val", ")", "{", "bsr", ".", "low", "=", "middle", ";", "bsr", ".", "high", "=", "middle", ";", "return", "bsr", ";", "}", "if", "(", "middleInterval", ".", "start", ">", "val", "&", "&", "(", "middle", "=", "=", "0", "|", "|", "intervals", ".", "get", "(", "middle", "-", "1", ")", ".", "end", "<", "val", ")", ")", "{", "bsr", ".", "low", "=", "middle", "-", "1", ";", "bsr", ".", "high", "=", "middle", ";", "return", "bsr", ";", "}", "if", "(", "middleInterval", ".", "end", "<", "val", "&", "&", "(", "middle", "=", "=", "intervals", ".", "size", "(", ")", "-", "1", "|", "|", "intervals", ".", "get", "(", "middle", "+", "1", ")", ".", "start", ">", "val", ")", ")", "{", "bsr", ".", "low", "=", "middle", ";", "bsr", ".", "high", "=", "middle", "+", "1", ";", "return", "bsr", ";", "}", "if", "(", "middleInterval", ".", "start", ">", "val", ")", "{", "end", "=", "middle", "-", "1", ";", "}", "else", "{", "start", "=", "middle", "+", "1", ";", "}", "}", "throw", "new", "IllegalArgumentException", "(", "\"", "<STR_LIT>", "\"", ")", ";", "}", "</s>"]
["<s>", "public", "List", "<", "Interval", ">", "insert", "(", "List", "<", "Interval", ">", "intervals", ",", "Interval", "newInterval", ")", "{", "List", "<", "Interval", ">", "result", "=", "new", "LinkedList", "<", ">", "(", ")", ";", "int", "i", "=", "0", ";", "while", "(", "i", "<", "intervals", ".", "size", "(", ")", "&", "&", "intervals", ".", "get", "(", "i", ")", ".", "end", "<", "newInterval", ".", "start", ")", "result", ".", "add", "(", "intervals", ".", "get", "(", "i", "+", "+", ")", ")", ";", "while", "(", "i", "<", "intervals", ".", "size", "(", ")", "&", "&", "intervals", ".", "get", "(", "i", ")", ".", "start", "<", "=", "newInterval", ".", "end", ")", "{", "newInterval", "=", "new", "Interval", "(", "Math", ".", "min", "(", "newInterval", ".", "start", ",", "intervals", ".", "get", "(", "i", ")", ".", "start", ")", ",", "Math", ".", "max", "(", "newInterval", ".", "end", ",", "intervals", ".", "get", "(", "i", ")", ".", "end", ")", ")", ";", "i", "+", "+", ";", "}", "result", ".", "add", "(", "newInterval", ")", ";", "while", "(", "i", "<", "intervals", ".", "size", "(", ")", ")", "result", ".", "add", "(", "intervals", ".", "get", "(", "i", "+", "+", ")", ")", ";", "return", "result", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "Interval", "i1", "=", "new", "Interval", "(", "1", ",", "<NUM_LIT:3>", ")", ";", "Interval", "i2", "=", "new", "Interval", "(", "<NUM_LIT:6>", ",", "<NUM_LIT:7>", ")", ";", "Interval", "i3", "=", "new", "Interval", "(", "<NUM_LIT:9>", ",", "<NUM_LIT:10>", ")", ";", "Interval", "i4", "=", "new", "Interval", "(", "<NUM_LIT:11>", ",", "<NUM_LIT:12>", ")", ";", "List", "<", "Interval", ">", "input", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "input", ".", "add", "(", "i1", ")", ";", "input", ".", "add", "(", "i2", ")", ";", "input", ".", "add", "(", "i3", ")", ";", "input", ".", "add", "(", "i4", ")", ";", "InsertInterval", "ii", "=", "new", "InsertInterval", "(", ")", ";", "System", ".", "out", ".", "println", "(", "ii", ".", "insert", "(", "input", ",", "new", "Interval", "(", "<NUM_LIT>", ",", "<NUM_LIT:15>", ")", ")", ")", ";", "}", "</s>"]
["<s>", "public", "void", "solveSudoku", "(", "char", "[", "]", "[", "]", "input", ")", "{", "boolean", "[", "]", "[", "]", "horizontal", "=", "new", "boolean", "[", "<NUM_LIT:9>", "]", "[", "<NUM_LIT:9>", "]", ";", "boolean", "[", "]", "[", "]", "vertical", "=", "new", "boolean", "[", "<NUM_LIT:9>", "]", "[", "<NUM_LIT:9>", "]", ";", "boolean", "[", "]", "[", "]", "box", "=", "new", "boolean", "[", "<NUM_LIT:9>", "]", "[", "<NUM_LIT:9>", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "input", "[", "0", "]", ".", "length", ";", "j", "+", "+", ")", "{", "if", "(", "input", "[", "i", "]", "[", "j", "]", "=", "=", "<CHAR_LIT:.>", ")", "{", "continue", ";", "}", "horizontal", "[", "i", "]", "[", "input", "[", "i", "]", "[", "j", "]", "-", "<CHAR_LIT:1>", "]", "=", "true", ";", "vertical", "[", "j", "]", "[", "input", "[", "i", "]", "[", "j", "]", "-", "<CHAR_LIT:1>", "]", "=", "true", ";", "int", "index", "=", "<NUM_LIT:3>", "*", "(", "i", "/", "<NUM_LIT:3>", ")", "+", "j", "/", "<NUM_LIT:3>", ";", "box", "[", "index", "]", "[", "input", "[", "i", "]", "[", "j", "]", "-", "<CHAR_LIT:1>", "]", "=", "true", ";", "}", "}", "solveSudokuUtil", "(", "input", ",", "horizontal", ",", "vertical", ",", "box", ",", "0", ",", "0", ")", ";", "}", "</s>"]
["<s>", "private", "boolean", "solveSudokuUtil", "(", "char", "[", "]", "[", "]", "input", ",", "boolean", "[", "]", "[", "]", "horizontal", ",", "boolean", "[", "]", "[", "]", "vertical", ",", "boolean", "[", "]", "[", "]", "box", ",", "int", "row", ",", "int", "col", ")", "{", "if", "(", "col", "=", "=", "<NUM_LIT:9>", ")", "{", "row", "=", "row", "+", "1", ";", "col", "=", "0", ";", "}", "if", "(", "row", "=", "=", "<NUM_LIT:9>", ")", "{", "return", "true", ";", "}", "if", "(", "input", "[", "row", "]", "[", "col", "]", "!", "=", "<CHAR_LIT:.>", ")", "{", "return", "solveSudokuUtil", "(", "input", ",", "horizontal", ",", "vertical", ",", "box", ",", "row", ",", "col", "+", "1", ")", ";", "}", "for", "(", "int", "val", "=", "1", ";", "val", "<", "=", "<NUM_LIT:9>", ";", "val", "+", "+", ")", "{", "int", "index", "=", "<NUM_LIT:3>", "*", "(", "row", "/", "<NUM_LIT:3>", ")", "+", "col", "/", "<NUM_LIT:3>", ";", "if", "(", "horizontal", "[", "row", "]", "[", "val", "-", "1", "]", "=", "=", "false", "&", "&", "vertical", "[", "col", "]", "[", "val", "-", "1", "]", "=", "=", "false", "&", "&", "box", "[", "index", "]", "[", "val", "-", "1", "]", "=", "=", "false", ")", "{", "horizontal", "[", "row", "]", "[", "val", "-", "1", "]", "=", "true", ";", "vertical", "[", "col", "]", "[", "val", "-", "1", "]", "=", "true", ";", "box", "[", "index", "]", "[", "val", "-", "1", "]", "=", "true", ";", "input", "[", "row", "]", "[", "col", "]", "=", "(", "char", ")", "(", "val", "+", "<CHAR_LIT:0>", ")", ";", "if", "(", "solveSudokuUtil", "(", "input", ",", "horizontal", ",", "vertical", ",", "box", ",", "row", ",", "col", "+", "1", ")", ")", "{", "return", "true", ";", "}", "input", "[", "row", "]", "[", "col", "]", "=", "<CHAR_LIT:.>", ";", "horizontal", "[", "row", "]", "[", "val", "-", "1", "]", "=", "false", ";", "vertical", "[", "col", "]", "[", "val", "-", "1", "]", "=", "false", ";", "box", "[", "index", "]", "[", "val", "-", "1", "]", "=", "false", ";", "}", "}", "return", "false", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "SudokuSolver", "ss", "=", "new", "SudokuSolver", "(", ")", ";", "char", "[", "]", "[", "]", "input", "=", "new", "char", "[", "<NUM_LIT:9>", "]", "[", "<NUM_LIT:9>", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "input", ".", "length", ";", "j", "+", "+", ")", "{", "input", "[", "i", "]", "[", "j", "]", "=", "<CHAR_LIT:.>", ";", "}", "}", "input", "[", "0", "]", "=", "\"", "<STR_LIT>", "\"", ".", "toCharArray", "(", ")", ";", "input", "[", "1", "]", "=", "\"", "<STR_LIT>", "\"", ".", "toCharArray", "(", ")", ";", "input", "[", "<NUM_LIT:2>", "]", "=", "\"", "<STR_LIT>", "\"", ".", "toCharArray", "(", ")", ";", "input", "[", "<NUM_LIT:3>", "]", "=", "\"", "<STR_LIT>", "\"", ".", "toCharArray", "(", ")", ";", "input", "[", "<NUM_LIT:4>", "]", "=", "\"", "<STR_LIT>", "\"", ".", "toCharArray", "(", ")", ";", "input", "[", "<NUM_LIT:5>", "]", "=", "\"", "<STR_LIT>", "\"", ".", "toCharArray", "(", ")", ";", "input", "[", "<NUM_LIT:6>", "]", "=", "\"", "<STR_LIT>", "\"", ".", "toCharArray", "(", ")", ";", "input", "[", "<NUM_LIT:7>", "]", "=", "\"", "<STR_LIT>", "\"", ".", "toCharArray", "(", ")", ";", "input", "[", "<NUM_LIT:8>", "]", "=", "\"", "<STR_LIT>", "\"", ".", "toCharArray", "(", ")", ";", "ss", ".", "solveSudoku", "(", "input", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "input", ".", "length", ";", "j", "+", "+", ")", "{", "System", ".", "out", ".", "print", "(", "input", "[", "i", "]", "[", "j", "]", "+", "\"", "\"", ")", ";", "}", "System", ".", "out", ".", "println", "(", ")", ";", "}", "}", "</s>"]
["<s>", "public", "void", "wiggleSort", "(", "int", "[", "]", "arr", ")", "{", "if", "(", "arr", ".", "length", "=", "=", "0", ")", "{", "return", ";", "}", "int", "k", "=", "arr", ".", "length", "/", "<NUM_LIT:2>", ";", "KthElementInArray", "kthElementInArray", "=", "new", "KthElementInArray", "(", ")", ";", "kthElementInArray", ".", "kthElement", "(", "arr", ",", "k", ")", ";", "int", "mid", "=", "arr", "[", "k", "]", ";", "int", "n", "=", "arr", ".", "length", ";", "int", "i", "=", "0", ",", "j", "=", "0", ";", "k", "=", "n", "-", "1", ";", "while", "(", "j", "<", "=", "k", ")", "{", "if", "(", "arr", "[", "next", "(", "j", ",", "n", ")", "]", ">", "mid", ")", "{", "swap", "(", "arr", ",", "next", "(", "i", "+", "+", ",", "n", ")", ",", "next", "(", "j", "+", "+", ",", "n", ")", ")", ";", "}", "else", "if", "(", "arr", "[", "next", "(", "j", ",", "n", ")", "]", "<", "mid", ")", "{", "swap", "(", "arr", ",", "next", "(", "j", ",", "n", ")", ",", "next", "(", "k", "-", "-", ",", "n", ")", ")", ";", "}", "else", "{", "j", "+", "+", ";", "}", "}", "}", "</s>"]
["<s>", "private", "int", "next", "(", "int", "index", ",", "int", "n", ")", "{", "return", "(", "<NUM_LIT:2>", "*", "index", "+", "1", ")", "%", "(", "n", "|", "1", ")", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "WiggleSort", "ws", "=", "new", "WiggleSort", "(", ")", ";", "int", "input", "[", "]", "=", "{", "<NUM_LIT:6>", ",", "<NUM_LIT:2>", ",", "1", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:8>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:6>", "}", ";", "ws", ".", "wiggleSort", "(", "input", ")", ";", "System", ".", "out", ".", "print", "(", "Arrays", ".", "toString", "(", "input", ")", ")", ";", "}", "</s>"]
["<s>", "public", "RandomListNode", "copyRandomList", "(", "RandomListNode", "head", ")", "{", "if", "(", "head", "=", "=", "null", ")", "{", "return", "null", ";", "}", "RandomListNode", "current", "=", "head", ";", "while", "(", "current", "!", "=", "null", ")", "{", "RandomListNode", "newNode", "=", "new", "RandomListNode", "(", "current", ".", "label", ")", ";", "newNode", ".", "next", "=", "current", ".", "next", ";", "newNode", ".", "random", "=", "current", ".", "random", ";", "current", ".", "next", "=", "newNode", ";", "current", "=", "newNode", ".", "next", ";", "}", "current", "=", "head", ";", "while", "(", "current", "!", "=", "null", ")", "{", "RandomListNode", "next", "=", "current", ".", "next", ";", "if", "(", "next", ".", "random", "!", "=", "null", ")", "{", "next", ".", "random", "=", "next", ".", "random", ".", "next", ";", "}", "current", "=", "current", ".", "next", ".", "next", ";", "}", "current", "=", "head", ";", "RandomListNode", "dummy", "=", "new", "RandomListNode", "(", "0", ")", ";", "RandomListNode", "newCurrent", "=", "dummy", ";", "while", "(", "current", "!", "=", "null", ")", "{", "newCurrent", ".", "next", "=", "current", ".", "next", ";", "newCurrent", "=", "newCurrent", ".", "next", ";", "current", ".", "next", "=", "current", ".", "next", ".", "next", ";", "current", "=", "current", ".", "next", ";", "}", "return", "dummy", ".", "next", ";", "}", "</s>"]
["<s>", "public", "boolean", "isOneEditDistance", "(", "String", "s", ",", "String", "t", ")", "{", "String", "larger", ",", "smaller", ";", "if", "(", "s", ".", "length", "(", ")", "<", "t", ".", "length", "(", ")", ")", "{", "larger", "=", "t", ";", "smaller", "=", "s", ";", "}", "else", "{", "larger", "=", "s", ";", "smaller", "=", "t", ";", "}", "if", "(", "Math", ".", "abs", "(", "larger", ".", "length", "(", ")", "-", "smaller", ".", "length", "(", ")", ")", ">", "1", ")", "{", "return", "false", ";", "}", "boolean", "diffFound", "=", "false", ";", "int", "j", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "smaller", ".", "length", "(", ")", ";", ")", "{", "if", "(", "smaller", ".", "charAt", "(", "i", ")", "=", "=", "larger", ".", "charAt", "(", "j", ")", ")", "{", "i", "+", "+", ";", "j", "+", "+", ";", "}", "else", "{", "if", "(", "diffFound", ")", "{", "return", "false", ";", "}", "else", "{", "diffFound", "=", "true", ";", "if", "(", "smaller", ".", "length", "(", ")", "=", "=", "larger", ".", "length", "(", ")", ")", "{", "i", "+", "+", ";", "j", "+", "+", ";", "}", "else", "{", "j", "+", "+", ";", "}", "}", "}", "}", "return", "diffFound", "|", "|", "j", "<", "larger", ".", "length", "(", ")", ";", "}", "</s>"]
["<s>", "public", "void", "wiggleSort1", "(", "int", "[", "]", "nums", ")", "{", "for", "(", "int", "i", "=", "1", ";", "i", "<", "nums", ".", "length", ";", "i", "+", "+", ")", "{", "int", "a", "=", "nums", "[", "i", "-", "1", "]", ";", "if", "(", "(", "i", "%", "<NUM_LIT:2>", "=", "=", "1", ")", "=", "=", "(", "a", ">", "nums", "[", "i", "]", ")", ")", "{", "nums", "[", "i", "-", "1", "]", "=", "nums", "[", "i", "]", ";", "nums", "[", "i", "]", "=", "a", ";", "}", "}", "}", "</s>"]
["<s>", "int", "read4", "(", "char", "[", "]", "buff", ")", "{", "buff", "[", "0", "]", "=", "<CHAR_LIT:a>", ";", "buff", "[", "1", "]", "=", "<CHAR_LIT:b>", ";", "buff", "[", "<NUM_LIT:2>", "]", "=", "<CHAR_LIT:c>", ";", "buff", "[", "<NUM_LIT:3>", "]", "=", "<CHAR_LIT>", ";", "return", "<NUM_LIT:4>", ";", "}", "</s>"]
["<s>", "public", "int", "read", "(", "char", "[", "]", "buf", ",", "int", "n", ")", "{", "int", "r", "=", "0", ";", "while", "(", "!", "queue", ".", "isEmpty", "(", ")", "&", "&", "r", "<", "n", ")", "{", "buf", "[", "r", "+", "+", "]", "=", "queue", ".", "poll", "(", ")", ";", "}", "if", "(", "r", "=", "=", "n", ")", "{", "return", "r", ";", "}", "int", "index", "=", "0", ";", "int", "readSize", "=", "0", ";", "char", "[", "]", "input", "=", "null", ";", "do", "{", "input", "=", "new", "char", "[", "<NUM_LIT:4>", "]", ";", "readSize", "=", "read4", "(", "input", ")", ";", "index", "=", "0", ";", "while", "(", "r", "<", "n", "&", "&", "index", "<", "readSize", ")", "{", "buf", "[", "r", "+", "+", "]", "=", "input", "[", "index", "+", "+", "]", ";", "}", "}", "while", "(", "readSize", "=", "=", "<NUM_LIT:4>", "&", "&", "r", "<", "n", ")", ";", "while", "(", "index", "<", "readSize", ")", "{", "queue", ".", "offer", "(", "input", "[", "index", "+", "+", "]", ")", ";", "}", "return", "r", ";", "}", "</s>"]
["<s>", "public", "boolean", "verifyPreorderConstantSpace", "(", "int", "[", "]", "preorder", ")", "{", "int", "start", "=", "0", ";", "int", "min", "=", "Integer", ".", "MIN_VALUE", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "preorder", ".", "length", ";", "i", "+", "+", ")", "{", "if", "(", "preorder", "[", "i", "]", "<", "min", ")", "{", "return", "false", ";", "}", "if", "(", "preorder", "[", "i", "]", ">", "preorder", "[", "i", "-", "1", "]", ")", "{", "int", "index", "=", "binarySearch", "(", "preorder", ",", "start", ",", "i", "-", "1", ",", "preorder", "[", "i", "]", ")", ";", "min", "=", "preorder", "[", "index", "]", ";", "start", "=", "i", ";", "}", "}", "return", "true", ";", "}", "</s>"]
["<s>", "int", "binarySearch", "(", "int", "[", "]", "preorder", ",", "int", "start", ",", "int", "end", ",", "int", "val", ")", "{", "int", "s", "=", "start", ";", "int", "e", "=", "end", ";", "while", "(", "s", "<", "=", "e", ")", "{", "int", "middle", "=", "(", "s", "+", "e", ")", "/", "<NUM_LIT:2>", ";", "if", "(", "preorder", "[", "middle", "]", "<", "val", "&", "&", "(", "start", "=", "=", "middle", "|", "|", "preorder", "[", "middle", "-", "1", "]", ">", "val", ")", ")", "{", "return", "middle", ";", "}", "else", "if", "(", "preorder", "[", "middle", "]", "<", "val", ")", "{", "e", "=", "middle", "-", "1", ";", "}", "else", "{", "s", "=", "middle", "+", "1", ";", "}", "}", "return", "-", "1", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testAddSimple", "(", ")", "{", "ArrayAddition", "arrayAddition", "=", "new", "ArrayAddition", "(", ")", ";", "int", "arr1", "[", "]", "=", "{", "<NUM_LIT:9>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:9>", "}", ";", "int", "arr2", "[", "]", "=", "{", "1", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:8>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:7>", "}", ";", "int", "[", "]", "result", "=", "arrayAddition", ".", "add", "(", "arr1", ",", "arr2", ")", ";", "int", "[", "]", "expected", "=", "{", "1", ",", "0", ",", "1", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:8>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:6>", "}", ";", "Assert", ".", "assertArrayEquals", "(", "expected", ",", "result", ")", ";", "}", "</s>"]
["<s>", "public", "int", "minTotalDistance", "(", "int", "[", "]", "[", "]", "grid", ")", "{", "if", "(", "grid", ".", "length", "=", "=", "0", "|", "|", "grid", "[", "0", "]", ".", "length", "=", "=", "0", ")", "{", "return", "0", ";", "}", "List", "<", "Integer", ">", "vertical", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "List", "<", "Integer", ">", "horizontal", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "grid", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "grid", "[", "0", "]", ".", "length", ";", "j", "+", "+", ")", "{", "if", "(", "grid", "[", "i", "]", "[", "j", "]", "=", "=", "1", ")", "{", "vertical", ".", "add", "(", "i", ")", ";", "horizontal", ".", "add", "(", "j", ")", ";", "}", "}", "}", "Collections", ".", "sort", "(", "vertical", ")", ";", "Collections", ".", "sort", "(", "horizontal", ")", ";", "int", "size", "=", "vertical", ".", "size", "(", ")", "/", "<NUM_LIT:2>", ";", "int", "x", "=", "vertical", ".", "get", "(", "size", ")", ";", "int", "y", "=", "horizontal", ".", "get", "(", "size", ")", ";", "int", "distance", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "grid", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "grid", "[", "0", "]", ".", "length", ";", "j", "+", "+", ")", "{", "if", "(", "grid", "[", "i", "]", "[", "j", "]", "=", "=", "1", ")", "{", "distance", "+", "=", "Math", ".", "abs", "(", "x", "-", "i", ")", "+", "Math", ".", "abs", "(", "y", "-", "j", ")", ";", "}", "}", "}", "return", "distance", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "BestMeetingPoint", "bmp", "=", "new", "BestMeetingPoint", "(", ")", ";", "int", "[", "]", "[", "]", "grid", "=", "{", "{", "1", ",", "0", ",", "0", ",", "0", ",", "1", "}", ",", "{", "0", ",", "0", ",", "0", ",", "0", ",", "0", "}", ",", "{", "0", ",", "0", ",", "1", ",", "0", ",", "0", "}", "}", ";", "System", ".", "out", ".", "print", "(", "bmp", ".", "minTotalDistance", "(", "grid", ")", ")", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testSimpleCase", "(", ")", "{", "NumberOfTrianglesInUnsortedArray", "numberOfTrianglesInUnsortedArray", "=", "new", "NumberOfTrianglesInUnsortedArray", "(", ")", ";", "int", "[", "]", "input", "=", "{", "<NUM_LIT:3>", ",", "<NUM_LIT:4>", ",", "<NUM_LIT:5>", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:8>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:15>", "}", ";", "int", "result", "=", "numberOfTrianglesInUnsortedArray", ".", "numberOfTriangles", "(", "input", ")", ";", "Assert", ".", "assertEquals", "(", "<NUM_LIT:15>", ",", "result", ")", ";", "}", "</s>"]
["<s>", "public", "int", "lengthOfLongestSubstringKDistinct", "(", "String", "s", ",", "int", "k", ")", "{", "if", "(", "k", "=", "=", "0", "|", "|", "s", ".", "length", "(", ")", "=", "=", "0", ")", "{", "return", "0", ";", "}", "int", "[", "]", "ascii", "=", "new", "int", "[", "<NUM_LIT>", "]", ";", "int", "count", "=", "0", ";", "int", "start", "=", "0", ";", "int", "max", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", ";", "i", "+", "+", ")", "{", "int", "ch", "=", "s", ".", "charAt", "(", "i", ")", ";", "if", "(", "count", "<", "k", ")", "{", "if", "(", "ascii", "[", "ch", "]", "=", "=", "0", ")", "{", "count", "+", "+", ";", "}", "}", "else", "if", "(", "ascii", "[", "ch", "]", "=", "=", "0", ")", "{", "while", "(", "start", "<", "i", ")", "{", "char", "ch1", "=", "s", ".", "charAt", "(", "start", "+", "+", ")", ";", "ascii", "[", "ch1", "]", "-", "-", ";", "if", "(", "ascii", "[", "ch1", "]", "=", "=", "0", ")", "{", "break", ";", "}", "}", "}", "ascii", "[", "ch", "]", "+", "+", ";", "max", "=", "Math", ".", "max", "(", "max", ",", "i", "-", "start", "+", "1", ")", ";", "}", "return", "max", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferenceCases", "(", ")", "{", "LongestSubstringWithKDistinctCharacters", "longestSubstringWithKDistinctCharacters", "=", "new", "LongestSubstringWithKDistinctCharacters", "(", ")", ";", "Assert", ".", "assertEquals", "(", "<NUM_LIT:3>", ",", "longestSubstringWithKDistinctCharacters", ".", "lengthOfLongestSubstringKDistinct", "(", "\"", "<STR_LIT>", "\"", ",", "<NUM_LIT:2>", ")", ")", ";", "Assert", ".", "assertEquals", "(", "1", ",", "longestSubstringWithKDistinctCharacters", ".", "lengthOfLongestSubstringKDistinct", "(", "\"", "<STR_LIT>", "\"", ",", "1", ")", ")", ";", "Assert", ".", "assertEquals", "(", "<NUM_LIT:5>", ",", "longestSubstringWithKDistinctCharacters", ".", "lengthOfLongestSubstringKDistinct", "(", "\"", "<STR_LIT>", "\"", ",", "<NUM_LIT:4>", ")", ")", ";", "Assert", ".", "assertEquals", "(", "0", ",", "longestSubstringWithKDistinctCharacters", ".", "lengthOfLongestSubstringKDistinct", "(", "\"", "<STR_LIT>", "\"", ",", "0", ")", ")", ";", "}", "</s>"]
["<s>", "public", "int", "[", "]", "countBits", "(", "int", "num", ")", "{", "if", "(", "num", "=", "=", "0", ")", "{", "return", "new", "int", "[", "1", "]", ";", "}", "int", "[", "]", "count", "=", "new", "int", "[", "num", "+", "1", "]", ";", "count", "[", "0", "]", "=", "0", ";", "int", "n", "=", "1", ";", "int", "start", "=", "n", ";", "while", "(", "start", "<", "=", "num", ")", "{", "start", "=", "n", ";", "count", "[", "start", "+", "+", "]", "=", "1", ";", "int", "end", "=", "n", "<", "<", "1", ";", "while", "(", "start", "<", "end", "&", "&", "start", "<", "=", "num", ")", "{", "count", "[", "start", "]", "=", "1", "+", "count", "[", "start", "-", "n", "]", ";", "start", "+", "+", ";", "}", "n", "=", "n", "<", "<", "1", ";", "}", "return", "count", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "CountingBitsTillNum", "countingBitsTillNum", "=", "new", "CountingBitsTillNum", "(", ")", ";", "int", "[", "]", "expected1", "=", "{", "0", ",", "1", ",", "1", "}", ";", "int", "[", "]", "expected2", "=", "{", "0", ",", "1", ",", "1", ",", "<NUM_LIT:2>", ",", "1", ",", "<NUM_LIT:2>", "}", ";", "int", "[", "]", "expected3", "=", "{", "0", ",", "1", ",", "1", ",", "<NUM_LIT:2>", ",", "1", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:3>", ",", "1", "}", ";", "int", "[", "]", "expected4", "=", "{", "0", ",", "1", ",", "1", ",", "<NUM_LIT:2>", ",", "1", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:3>", ",", "1", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:3>", "}", ";", "Assert", ".", "assertArrayEquals", "(", "expected1", ",", "countingBitsTillNum", ".", "countBits", "(", "<NUM_LIT:2>", ")", ")", ";", "Assert", ".", "assertArrayEquals", "(", "expected2", ",", "countingBitsTillNum", ".", "countBits", "(", "<NUM_LIT:5>", ")", ")", ";", "Assert", ".", "assertArrayEquals", "(", "expected3", ",", "countingBitsTillNum", ".", "countBits", "(", "<NUM_LIT:8>", ")", ")", ";", "Assert", ".", "assertArrayEquals", "(", "expected4", ",", "countingBitsTillNum", ".", "countBits", "(", "<NUM_LIT:11>", ")", ")", ";", "}", "</s>"]
["<s>", "public", "void", "wallsAndGates", "(", "int", "[", "]", "[", "]", "rooms", ")", "{", "Deque", "<", "Cell", ">", "queue", "=", "new", "LinkedList", "<", ">", "(", ")", ";", "gates", "(", "rooms", ",", "queue", ")", ";", "while", "(", "!", "queue", ".", "isEmpty", "(", ")", ")", "{", "Cell", "cell", "=", "queue", ".", "pollLast", "(", ")", ";", "addNeighbors", "(", "rooms", ",", "cell", ".", "row", ",", "cell", ".", "col", ",", "queue", ")", ";", "}", "}", "</s>"]
["<s>", "private", "void", "addNeighbors", "(", "int", "[", "]", "[", "]", "rooms", ",", "int", "row", ",", "int", "col", ",", "Deque", "<", "Cell", ">", "queue", ")", "{", "for", "(", "int", "[", "]", "d1", ":", "d", ")", "{", "int", "r1", "=", "row", "+", "d1", "[", "0", "]", ";", "int", "c1", "=", "col", "+", "d1", "[", "1", "]", ";", "if", "(", "r1", "<", "0", "|", "|", "c1", "<", "0", "|", "|", "r1", ">", "=", "rooms", ".", "length", "|", "|", "c1", ">", "=", "rooms", "[", "0", "]", ".", "length", "|", "|", "rooms", "[", "r1", "]", "[", "c1", "]", "!", "=", "INF", ")", "{", "continue", ";", "}", "rooms", "[", "r1", "]", "[", "c1", "]", "=", "1", "+", "rooms", "[", "row", "]", "[", "col", "]", ";", "queue", ".", "offerFirst", "(", "new", "Cell", "(", "r1", ",", "c1", ")", ")", ";", "}", "}", "</s>"]
["<s>", "private", "void", "gates", "(", "int", "[", "]", "[", "]", "rooms", ",", "Deque", "<", "Cell", ">", "queue", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "rooms", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "rooms", "[", "0", "]", ".", "length", ";", "j", "+", "+", ")", "{", "if", "(", "rooms", "[", "i", "]", "[", "j", "]", "=", "=", "0", ")", "{", "queue", ".", "offerFirst", "(", "new", "Cell", "(", "i", ",", "j", ")", ")", ";", "}", "}", "}", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentScenarios", "(", ")", "{", "WallsAndGates", "wallsAndGates", "=", "new", "WallsAndGates", "(", ")", ";", "int", "INF", "=", "Integer", ".", "MAX_VALUE", ";", "int", "[", "]", "[", "]", "rooms", "=", "{", "{", "INF", ",", "-", "1", ",", "0", ",", "INF", "}", ",", "{", "INF", ",", "INF", ",", "INF", ",", "-", "1", "}", ",", "{", "INF", ",", "-", "1", ",", "INF", ",", "-", "1", "}", ",", "{", "0", ",", "-", "1", ",", "INF", ",", "INF", "}", "}", ";", "int", "[", "]", "[", "]", "output", "=", "{", "{", "<NUM_LIT:3>", ",", "-", "1", ",", "0", ",", "1", "}", ",", "{", "<NUM_LIT:2>", ",", "<NUM_LIT:2>", ",", "1", ",", "-", "1", "}", ",", "{", "1", ",", "-", "1", ",", "<NUM_LIT:2>", ",", "-", "1", "}", ",", "{", "0", ",", "-", "1", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:4>", "}", "}", ";", "wallsAndGates", ".", "wallsAndGates", "(", "rooms", ")", ";", "int", "i", "=", "0", ";", "for", "(", "int", "[", "]", "o", ":", "output", ")", "{", "Assert", ".", "assertArrayEquals", "(", "o", ",", "rooms", "[", "i", "+", "+", "]", ")", ";", "}", "}", "</s>"]
["<s>", "public", "List", "<", "List", "<", "String", ">", ">", "partition", "(", "String", "s", ")", "{", "Map", "<", "Integer", ",", "List", "<", "List", "<", "String", ">", ">", ">", "dp", "=", "new", "HashMap", "<", ">", "(", ")", ";", "List", "<", "List", "<", "String", ">", ">", "result", "=", "partitionUtil", "(", "s", ",", "dp", ",", "0", ")", ";", "List", "<", "List", "<", "String", ">", ">", "r", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "List", "<", "String", ">", "l", ":", "result", ")", "{", "r", ".", "add", "(", "l", ")", ";", "}", "return", "r", ";", "}", "</s>"]
["<s>", "private", "List", "<", "List", "<", "String", ">", ">", "partitionUtil", "(", "String", "s", ",", "Map", "<", "Integer", ",", "List", "<", "List", "<", "String", ">", ">", ">", "dp", ",", "int", "start", ")", "{", "if", "(", "start", "=", "=", "s", ".", "length", "(", ")", ")", "{", "List", "<", "String", ">", "r", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "return", "Collections", ".", "singletonList", "(", "r", ")", ";", "}", "if", "(", "dp", ".", "containsKey", "(", "start", ")", ")", "{", "return", "dp", ".", "get", "(", "start", ")", ";", "}", "List", "<", "List", "<", "String", ">", ">", "words", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "start", ";", "i", "<", "s", ".", "length", "(", ")", ";", "i", "+", "+", ")", "{", "if", "(", "!", "isPalindrome", "(", "s", ",", "start", ",", "i", ")", ")", "{", "continue", ";", "}", "String", "newWord", "=", "s", ".", "substring", "(", "start", ",", "i", "+", "1", ")", ";", "List", "<", "List", "<", "String", ">", ">", "result", "=", "partitionUtil", "(", "s", ",", "dp", ",", "i", "+", "1", ")", ";", "for", "(", "List", "l", ":", "result", ")", "{", "List", "<", "String", ">", "l1", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "l1", ".", "add", "(", "newWord", ")", ";", "l1", ".", "addAll", "(", "l", ")", ";", "words", ".", "add", "(", "l1", ")", ";", "}", "}", "dp", ".", "put", "(", "start", ",", "words", ")", ";", "return", "words", ";", "}", "</s>"]
["<s>", "private", "boolean", "isPalindrome", "(", "String", "str", ",", "int", "r", ",", "int", "t", ")", "{", "while", "(", "r", "<", "t", ")", "{", "if", "(", "str", ".", "charAt", "(", "r", ")", "!", "=", "str", ".", "charAt", "(", "t", ")", ")", "{", "return", "false", ";", "}", "r", "+", "+", ";", "t", "-", "-", ";", "}", "return", "true", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testAllPartitions", "(", ")", "{", "PalindromePartition", "palindromePartition", "=", "new", "PalindromePartition", "(", ")", ";", "List", "<", "List", "<", "String", ">", ">", "result", "=", "palindromePartition", ".", "partition", "(", "\"", "<STR_LIT>", "\"", ")", ";", "List", "<", "List", "<", "String", ">", ">", "expected", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "List", "<", "String", ">", "r1", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "r1", ".", "add", "(", "\"", "<STR_LIT>", "\"", ")", ";", "r1", ".", "add", "(", "\"", "<STR_LIT>", "\"", ")", ";", "r1", ".", "add", "(", "\"", "<STR_LIT>", "\"", ")", ";", "expected", ".", "add", "(", "r1", ")", ";", "r1", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "r1", ".", "add", "(", "\"", "<STR_LIT>", "\"", ")", ";", "r1", ".", "add", "(", "\"", "<STR_LIT>", "\"", ")", ";", "expected", ".", "add", "(", "r1", ")", ";", "int", "index", "=", "0", ";", "for", "(", "List", "<", "String", ">", "r", ":", "result", ")", "{", "Assert", ".", "assertEquals", "(", "expected", ".", "get", "(", "index", "+", "+", ")", ",", "r", ")", ";", "}", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "palindromePartitionMinCuts", "(", ")", "{", "PalindromePartition", "palindromePartition", "=", "new", "PalindromePartition", "(", ")", ";", "Assert", ".", "assertEquals", "(", "<NUM_LIT:3>", ",", "palindromePartition", ".", "minCuts", "(", "\"", "<STR_LIT>", "\"", ".", "toCharArray", "(", ")", ")", ")", ";", "}", "</s>"]
["<s>", "public", "int", "minCut", "(", "String", "str", ")", "{", "if", "(", "str", ".", "length", "(", ")", "=", "=", "0", ")", "{", "return", "0", ";", "}", "int", "[", "]", "cut", "=", "new", "int", "[", "str", ".", "length", "(", ")", "]", ";", "boolean", "isPal", "[", "]", "[", "]", "=", "new", "boolean", "[", "str", ".", "length", "(", ")", "]", "[", "str", ".", "length", "(", ")", "]", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "str", ".", "length", "(", ")", ";", "i", "+", "+", ")", "{", "int", "min", "=", "i", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "=", "i", ";", "j", "+", "+", ")", "{", "if", "(", "str", ".", "charAt", "(", "i", ")", "=", "=", "str", ".", "charAt", "(", "j", ")", "&", "&", "(", "i", "<", "=", "j", "+", "1", "|", "|", "isPal", "[", "i", "-", "1", "]", "[", "j", "+", "1", "]", ")", ")", "{", "isPal", "[", "i", "]", "[", "j", "]", "=", "true", ";", "min", "=", "Math", ".", "min", "(", "min", ",", "j", "=", "=", "0", "?", "0", ":", "1", "+", "cut", "[", "j", "-", "1", "]", ")", ";", "}", "}", "cut", "[", "i", "]", "=", "min", ";", "}", "return", "cut", "[", "str", ".", "length", "(", ")", "-", "1", "]", ";", "}", "</s>"]
["<s>", "public", "List", "<", "String", ">", "restoreIpAddresses", "(", "String", "s", ")", "{", "List", "<", "String", ">", "result", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "List", "<", "String", ">", "current", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "restoreIpAddressesUtil", "(", "s", ",", "0", ",", "0", ",", "result", ",", "current", ")", ";", "return", "result", ";", "}", "</s>"]
["<s>", "private", "void", "restoreIpAddressesUtil", "(", "String", "s", ",", "int", "start", ",", "int", "count", ",", "List", "<", "String", ">", "result", ",", "List", "<", "String", ">", "current", ")", "{", "if", "(", "start", "=", "=", "s", ".", "length", "(", ")", "&", "&", "count", "=", "=", "<NUM_LIT:4>", ")", "{", "StringBuffer", "stringBuffer", "=", "new", "StringBuffer", "(", "current", ".", "get", "(", "0", ")", ")", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "current", ".", "size", "(", ")", ";", "i", "+", "+", ")", "{", "stringBuffer", ".", "append", "(", "\"", "<STR_LIT:.>", "\"", ")", ".", "append", "(", "current", ".", "get", "(", "i", ")", ")", ";", "}", "result", ".", "add", "(", "stringBuffer", ".", "toString", "(", ")", ")", ";", "return", ";", "}", "else", "if", "(", "start", "=", "=", "s", ".", "length", "(", ")", "|", "|", "count", "=", "=", "<NUM_LIT:4>", ")", "{", "return", ";", "}", "for", "(", "int", "i", "=", "start", ";", "i", "<", "s", ".", "length", "(", ")", "&", "&", "i", "<", "start", "+", "<NUM_LIT:3>", ";", "i", "+", "+", ")", "{", "if", "(", "i", "!", "=", "start", "&", "&", "s", ".", "charAt", "(", "start", ")", "=", "=", "<CHAR_LIT:0>", ")", "{", "break", ";", "}", "String", "ip", "=", "s", ".", "substring", "(", "start", ",", "i", "+", "1", ")", ";", "if", "(", "Integer", ".", "valueOf", "(", "ip", ")", ">", "<NUM_LIT:255>", ")", "{", "continue", ";", "}", "current", ".", "add", "(", "ip", ")", ";", "restoreIpAddressesUtil", "(", "s", ",", "i", "+", "1", ",", "count", "+", "1", ",", "result", ",", "current", ")", ";", "current", ".", "remove", "(", "current", ".", "size", "(", ")", "-", "1", ")", ";", "}", "}", "</s>"]
["<s>", "public", "static", "void", "compareList", "(", "List", "<", "String", ">", "expected", ",", "List", "<", "String", ">", "actual", ")", "{", "int", "i", "=", "0", ";", "for", "(", "String", "str", ":", "expected", ")", "{", "Assert", ".", "assertEquals", "(", "str", ",", "actual", ".", "get", "(", "i", "+", "+", ")", ")", ";", "}", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferenceCases", "(", ")", "{", "RestoreIPAddresses", "restoreIPAddresses", "=", "new", "RestoreIPAddresses", "(", ")", ";", "List", "<", "String", ">", "result", "=", "restoreIPAddresses", ".", "restoreIpAddresses", "(", "\"", "<STR_LIT>", "\"", ")", ";", "List", "<", "String", ">", "expected", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "expected", ".", "add", "(", "\"", "<STR_LIT>", "\"", ")", ";", "expected", ".", "add", "(", "\"", "<STR_LIT>", "\"", ")", ";", "TestUtil", ".", "compareList", "(", "expected", ",", "result", ")", ";", "List", "<", "String", ">", "result1", "=", "restoreIPAddresses", ".", "restoreIpAddresses", "(", "\"", "<STR_LIT>", "\"", ")", ";", "expected", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "expected", ".", "add", "(", "\"", "<STR_LIT>", "\"", ")", ";", "TestUtil", ".", "compareList", "(", "expected", ",", "result1", ")", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "TravelingSalesmanHeldKarp", "tsp", "=", "new", "TravelingSalesmanHeldKarp", "(", ")", ";", "int", "[", "]", "[", "]", "distance", "=", "{", "{", "0", ",", "<NUM_LIT:12>", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:6>", ",", "1", ",", "<NUM_LIT:2>", "}", ",", "{", "<NUM_LIT:12>", ",", "0", ",", "<NUM_LIT:6>", ",", "1", ",", "<NUM_LIT:8>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:10>", "}", ",", "{", "<NUM_LIT:3>", ",", "<NUM_LIT:6>", ",", "0", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:7>", ",", "<NUM_LIT:11>", ",", "<NUM_LIT:7>", "}", ",", "{", "<NUM_LIT:9>", ",", "1", ",", "<NUM_LIT:6>", ",", "0", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:10>", ",", "<NUM_LIT:3>", "}", ",", "{", "<NUM_LIT:6>", ",", "<NUM_LIT:8>", ",", "<NUM_LIT:7>", ",", "<NUM_LIT:9>", ",", "0", ",", "1", ",", "<NUM_LIT:11>", "}", ",", "{", "1", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:11>", ",", "<NUM_LIT:10>", ",", "1", ",", "0", ",", "<NUM_LIT:12>", "}", ",", "{", "<NUM_LIT:2>", ",", "<NUM_LIT:10>", ",", "<NUM_LIT:7>", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:11>", ",", "<NUM_LIT:12>", ",", "0", "}", "}", ";", "int", "cost", "=", "tsp", ".", "minCost", "(", "distance", ")", ";", "Assert", ".", "assertEquals", "(", "<NUM_LIT>", ",", "cost", ")", ";", "int", "[", "]", "[", "]", "distance1", "=", "{", "{", "0", ",", "1", ",", "<NUM_LIT:15>", ",", "<NUM_LIT:6>", "}", ",", "{", "<NUM_LIT:2>", ",", "0", ",", "<NUM_LIT:7>", ",", "<NUM_LIT:3>", "}", ",", "{", "<NUM_LIT:9>", ",", "<NUM_LIT:6>", ",", "0", ",", "<NUM_LIT:12>", "}", ",", "{", "<NUM_LIT:10>", ",", "<NUM_LIT:4>", ",", "<NUM_LIT:8>", ",", "0", "}", ",", "}", ";", "cost", "=", "tsp", ".", "minCost", "(", "distance1", ")", ";", "Assert", ".", "assertEquals", "(", "<NUM_LIT>", ",", "cost", ")", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "MultiplyAllFieldsExceptOwnPosition", "mop", "=", "new", "MultiplyAllFieldsExceptOwnPosition", "(", ")", ";", "int", "[", "]", "input1", "=", "{", "0", ",", "<NUM_LIT:9>", ",", "-", "<NUM_LIT:2>", "}", ";", "int", "[", "]", "output1", "=", "{", "-", "<NUM_LIT>", ",", "0", ",", "0", "}", ";", "Assert", ".", "assertArrayEquals", "(", "output1", ",", "mop", ".", "multiply", "(", "input1", ")", ")", ";", "int", "[", "]", "input2", "=", "{", "1", ",", "1", "}", ";", "int", "[", "]", "output2", "=", "{", "1", ",", "1", "}", ";", "Assert", ".", "assertArrayEquals", "(", "output2", ",", "mop", ".", "multiply", "(", "input2", ")", ")", ";", "int", "[", "]", "input3", "=", "{", "<NUM_LIT:3>", ",", "1", ",", "-", "<NUM_LIT:3>", ",", "<NUM_LIT:6>", "}", ";", "int", "[", "]", "output3", "=", "{", "-", "<NUM_LIT>", ",", "-", "<NUM_LIT>", ",", "<NUM_LIT>", ",", "-", "<NUM_LIT:9>", "}", ";", "Assert", ".", "assertArrayEquals", "(", "output3", ",", "mop", ".", "multiply", "(", "input3", ")", ")", ";", "}", "</s>"]
["<s>", "public", "void", "rearrange", "(", "int", "[", "]", "input", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "length", ";", "i", "+", "+", ")", "{", "int", "t", "=", "input", "[", "i", "]", ";", "if", "(", "t", "<", "0", ")", "{", "continue", ";", "}", "int", "i1", "=", "i", ";", "while", "(", "true", ")", "{", "int", "j", "=", "i1", "<", "input", ".", "length", "/", "<NUM_LIT:2>", "?", "<NUM_LIT:2>", "*", "i1", "+", "1", ":", "(", "input", ".", "length", "-", "1", "-", "i1", ")", "*", "<NUM_LIT:2>", ";", "if", "(", "j", "=", "=", "i1", ")", "{", "break", ";", "}", "if", "(", "input", "[", "j", "]", "<", "0", ")", "{", "break", ";", "}", "int", "t1", "=", "input", "[", "j", "]", ";", "input", "[", "j", "]", "=", "-", "t", ";", "t", "=", "t1", ";", "i1", "=", "j", ";", "}", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "length", ";", "i", "+", "+", ")", "{", "input", "[", "i", "]", "=", "Math", ".", "abs", "(", "input", "[", "i", "]", ")", ";", "}", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "differentCases", "(", ")", "{", "MaximumMinimumArrangement", "maximumMinimumArrangement", "=", "new", "MaximumMinimumArrangement", "(", ")", ";", "int", "[", "]", "input1", "=", "{", "1", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:4>", ",", "<NUM_LIT:5>", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:7>", "}", ";", "maximumMinimumArrangement", ".", "rearrange", "(", "input1", ")", ";", "int", "[", "]", "expected1", "=", "{", "<NUM_LIT:7>", ",", "1", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:5>", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:4>", "}", ";", "Assert", ".", "assertArrayEquals", "(", "expected1", ",", "input1", ")", ";", "int", "[", "]", "input2", "=", "{", "1", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:4>", ",", "<NUM_LIT:5>", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:7>", ",", "<NUM_LIT:8>", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:10>", "}", ";", "maximumMinimumArrangement", ".", "rearrange", "(", "input2", ")", ";", "int", "[", "]", "expected2", "=", "{", "<NUM_LIT:10>", ",", "1", ",", "<NUM_LIT:9>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:8>", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:7>", ",", "<NUM_LIT:4>", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:5>", "}", ";", "Assert", ".", "assertArrayEquals", "(", "expected2", ",", "input2", ")", ";", "}", "</s>"]
["<s>", "public", "List", "<", "String", ">", "fullJustify", "(", "String", "[", "]", "words", ",", "int", "maxWidth", ")", "{", "List", "<", "String", ">", "result", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "words", ".", "length", ";", ")", "{", "int", "total", "=", "words", "[", "i", "]", ".", "length", "(", ")", ";", "int", "j", "=", "i", "+", "1", ";", "StringBuffer", "buff", "=", "new", "StringBuffer", "(", ")", ";", "buff", ".", "append", "(", "words", "[", "i", "]", ")", ";", "while", "(", "j", "<", "words", ".", "length", "&", "&", "total", "+", "words", "[", "j", "]", ".", "length", "(", ")", "+", "1", "<", "=", "maxWidth", ")", "{", "total", "+", "=", "words", "[", "j", "]", ".", "length", "(", ")", "+", "1", ";", "j", "+", "+", ";", "}", "int", "remaining", "=", "maxWidth", "-", "total", ";", "if", "(", "j", "!", "=", "words", ".", "length", ")", "{", "int", "count", "=", "j", "-", "i", "-", "1", ";", "if", "(", "count", "=", "=", "0", ")", "{", "padSpace", "(", "buff", ",", "remaining", ")", ";", "}", "else", "{", "int", "q", "=", "remaining", "/", "count", ";", "int", "r", "=", "remaining", "%", "count", ";", "for", "(", "int", "k", "=", "i", "+", "1", ";", "k", "<", "j", ";", "k", "+", "+", ")", "{", "padSpace", "(", "buff", ",", "q", ")", ";", "if", "(", "r", ">", "0", ")", "{", "buff", ".", "append", "(", "\"", "\"", ")", ";", "r", "-", "-", ";", "}", "buff", ".", "append", "(", "\"", "\"", ")", ".", "append", "(", "words", "[", "k", "]", ")", ";", "}", "}", "}", "else", "{", "for", "(", "int", "k", "=", "i", "+", "1", ";", "k", "<", "j", ";", "k", "+", "+", ")", "{", "buff", ".", "append", "(", "\"", "\"", ")", ".", "append", "(", "words", "[", "k", "]", ")", ";", "}", "padSpace", "(", "buff", ",", "remaining", ")", ";", "}", "result", ".", "add", "(", "buff", ".", "toString", "(", ")", ")", ";", "i", "=", "j", ";", "}", "return", "result", ";", "}", "</s>"]
["<s>", "private", "void", "padSpace", "(", "StringBuffer", "buff", ",", "int", "count", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "count", ";", "i", "+", "+", ")", "{", "buff", ".", "append", "(", "\"", "\"", ")", ";", "}", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "String", "[", "]", "input", "=", "{", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT:.>", "\"", "}", ";", "GreedyTextJustification", "gtj", "=", "new", "GreedyTextJustification", "(", ")", ";", "List", "<", "String", ">", "result", "=", "gtj", ".", "fullJustify", "(", "input", ",", "<NUM_LIT:12>", ")", ";", "System", ".", "out", ".", "print", "(", "result", ")", ";", "}", "</s>"]
["<s>", "public", "void", "solve", "(", "char", "[", "]", "[", "]", "board", ")", "{", "if", "(", "board", ".", "length", "=", "=", "0", "|", "|", "board", "[", "0", "]", ".", "length", "=", "=", "0", ")", "{", "return", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "board", ".", "length", ";", "i", "+", "+", ")", "{", "dfs", "(", "board", ",", "i", ",", "0", ")", ";", "dfs", "(", "board", ",", "i", ",", "board", "[", "0", "]", ".", "length", "-", "1", ")", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "board", "[", "0", "]", ".", "length", ";", "i", "+", "+", ")", "{", "dfs", "(", "board", ",", "0", ",", "i", ")", ";", "dfs", "(", "board", ",", "board", ".", "length", "-", "1", ",", "i", ")", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "board", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "board", "[", "0", "]", ".", "length", ";", "j", "+", "+", ")", "{", "if", "(", "board", "[", "i", "]", "[", "j", "]", "=", "=", "<CHAR_LIT>", ")", "{", "board", "[", "i", "]", "[", "j", "]", "=", "<CHAR_LIT>", ";", "}", "else", "if", "(", "board", "[", "i", "]", "[", "j", "]", "=", "=", "<CHAR_LIT:1>", ")", "{", "board", "[", "i", "]", "[", "j", "]", "=", "<CHAR_LIT>", ";", "}", "}", "}", "}", "</s>"]
["<s>", "private", "void", "dfs", "(", "char", "[", "]", "[", "]", "board", ",", "int", "i", ",", "int", "j", ")", "{", "if", "(", "i", "<", "0", "|", "|", "i", ">", "=", "board", ".", "length", "|", "|", "j", "<", "0", "|", "|", "j", ">", "=", "board", "[", "0", "]", ".", "length", ")", "{", "return", ";", "}", "if", "(", "board", "[", "i", "]", "[", "j", "]", "!", "=", "<CHAR_LIT>", ")", "{", "return", ";", "}", "board", "[", "i", "]", "[", "j", "]", "=", "<CHAR_LIT:1>", ";", "if", "(", "i", "<", "board", ".", "length", "-", "<NUM_LIT:2>", ")", "{", "dfs", "(", "board", ",", "i", "+", "1", ",", "j", ")", ";", "}", "if", "(", "i", ">", "1", ")", "{", "dfs", "(", "board", ",", "i", "-", "1", ",", "j", ")", ";", "}", "if", "(", "j", "<", "board", "[", "0", "]", ".", "length", "-", "<NUM_LIT:2>", ")", "{", "dfs", "(", "board", ",", "i", ",", "j", "+", "1", ")", ";", "}", "if", "(", "j", ">", "1", ")", "{", "dfs", "(", "board", ",", "i", ",", "j", "-", "1", ")", ";", "}", "}", "</s>"]
["<s>", "public", "String", "largestNumber", "(", "int", "[", "]", "nums", ")", "{", "Integer", "[", "]", "nums1", "=", "new", "Integer", "[", "nums", ".", "length", "]", ";", "int", "i", "=", "0", ";", "for", "(", "int", "n", ":", "nums", ")", "{", "nums1", "[", "i", "+", "+", "]", "=", "n", ";", "}", "IntegerComparator", "comparator", "=", "new", "IntegerComparator", "(", ")", ";", "Arrays", ".", "sort", "(", "nums1", ",", "comparator", ")", ";", "StringBuffer", "buff", "=", "new", "StringBuffer", "(", ")", ";", "for", "(", "i", "=", "0", ";", "i", "<", "nums1", ".", "length", ";", "i", "+", "+", ")", "{", "if", "(", "nums1", "[", "i", "]", "!", "=", "0", ")", "{", "break", ";", "}", "}", "if", "(", "i", "=", "=", "nums1", ".", "length", ")", "{", "return", "\"", "<STR_LIT:0>", "\"", ";", "}", "for", "(", ";", "i", "<", "nums1", ".", "length", ";", "i", "+", "+", ")", "{", "buff", ".", "append", "(", "nums1", "[", "i", "]", ")", ";", "}", "return", "buff", ".", "toString", "(", ")", ";", "}", "</s>"]
["<s>", "public", "List", "<", "Node", ">", "generateTrees", "(", "int", "n", ")", "{", "if", "(", "n", "=", "=", "0", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "return", "construct", "(", "1", ",", "n", ")", ";", "}", "</s>"]
["<s>", "public", "List", "<", "String", ">", "generateAbbreviations", "(", "String", "word", ")", "{", "List", "<", "String", ">", "result", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "generateAbbreviationsUtil", "(", "word", ",", "result", ",", "\"", "\"", ",", "0", ",", "0", ")", ";", "return", "result", ";", "}", "</s>"]
["<s>", "public", "void", "generateAbbreviationsUtil", "(", "String", "input", ",", "List", "<", "String", ">", "result", ",", "String", "current", ",", "int", "pos", ",", "int", "count", ")", "{", "if", "(", "input", ".", "length", "(", ")", "=", "=", "pos", ")", "{", "if", "(", "count", ">", "0", ")", "{", "result", ".", "add", "(", "current", "+", "count", ")", ";", "}", "else", "{", "result", ".", "add", "(", "current", ")", ";", "}", "return", ";", "}", "generateAbbreviationsUtil", "(", "input", ",", "result", ",", "current", ",", "pos", "+", "1", ",", "count", "+", "1", ")", ";", "generateAbbreviationsUtil", "(", "input", ",", "result", ",", "current", "+", "(", "count", ">", "0", "?", "count", ":", "\"", "\"", ")", "+", "input", ".", "charAt", "(", "pos", ")", ",", "pos", "+", "1", ",", "0", ")", ";", "}", "</s>"]
["<s>", "public", "String", "simplifyPath", "(", "String", "path", ")", "{", "Deque", "<", "String", ">", "stack", "=", "new", "LinkedList", "<", ">", "(", ")", ";", "StringTokenizer", "token", "=", "new", "StringTokenizer", "(", "path", ",", "\"", "<STR_LIT:/>", "\"", ")", ";", "while", "(", "token", ".", "hasMoreTokens", "(", ")", ")", "{", "String", "tok", "=", "token", ".", "nextToken", "(", ")", ";", "if", "(", "tok", ".", "equals", "(", "\"", "<STR_LIT:.>", "\"", ")", ")", "{", "continue", ";", "}", "else", "if", "(", "tok", ".", "equals", "(", "\"", "<STR_LIT>", "\"", ")", ")", "{", "stack", ".", "pollFirst", "(", ")", ";", "}", "else", "{", "stack", ".", "offerFirst", "(", "tok", ")", ";", "}", "}", "StringBuffer", "buff", "=", "new", "StringBuffer", "(", ")", ";", "if", "(", "stack", ".", "isEmpty", "(", ")", ")", "{", "buff", ".", "append", "(", "\"", "<STR_LIT:/>", "\"", ")", ";", "}", "while", "(", "!", "stack", ".", "isEmpty", "(", ")", ")", "{", "buff", ".", "append", "(", "\"", "<STR_LIT:/>", "\"", ")", ".", "append", "(", "stack", ".", "pollLast", "(", ")", ")", ";", "}", "return", "buff", ".", "toString", "(", ")", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "String", "absCurrentFolder", "=", "\"", "<STR_LIT>", "\"", ";", "SimplyPath", "mfc", "=", "new", "SimplyPath", "(", ")", ";", "System", ".", "out", ".", "println", "(", "mfc", ".", "simplifyPath", "(", "absCurrentFolder", ")", ")", ";", "}", "</s>"]
["<s>", "public", "int", "maxProduct", "(", "String", "[", "]", "words", ")", "{", "int", "max", "=", "0", ";", "Arrays", ".", "sort", "(", "words", ",", "(", "a", ",", "b", ")", "-", ">", "b", ".", "length", "(", ")", "-", "a", ".", "length", "(", ")", ")", ";", "int", "[", "]", "masks", "=", "new", "int", "[", "words", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "masks", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "char", "c", ":", "words", "[", "i", "]", ".", "toCharArray", "(", ")", ")", "{", "masks", "[", "i", "]", "|", "=", "1", "<", "<", "(", "c", "-", "<CHAR_LIT:a>", ")", ";", "}", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "masks", ".", "length", ";", "i", "+", "+", ")", "{", "if", "(", "words", "[", "i", "]", ".", "length", "(", ")", "*", "words", "[", "i", "]", ".", "length", "(", ")", "<", "=", "max", ")", "{", "break", ";", "}", "for", "(", "int", "j", "=", "i", "+", "1", ";", "j", "<", "masks", ".", "length", ";", "j", "+", "+", ")", "{", "if", "(", "(", "masks", "[", "i", "]", "&", "masks", "[", "j", "]", ")", "=", "=", "0", ")", "{", "max", "=", "Math", ".", "max", "(", "max", ",", "words", "[", "i", "]", ".", "length", "(", ")", "*", "words", "[", "j", "]", ".", "length", "(", ")", ")", ";", "break", ";", "}", "}", "}", "return", "max", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "MaxProductWordLength", "maxProductWordLength", "=", "new", "MaxProductWordLength", "(", ")", ";", "String", "[", "]", "words1", "=", "{", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", "}", ";", "Assert", ".", "assertEquals", "(", "<NUM_LIT:16>", ",", "maxProductWordLength", ".", "maxProduct", "(", "words1", ")", ")", ";", "String", "[", "]", "words2", "=", "{", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", ",", "\"", "<STR_LIT>", "\"", "}", ";", "Assert", ".", "assertEquals", "(", "<NUM_LIT:4>", ",", "maxProductWordLength", ".", "maxProduct", "(", "words2", ")", ")", ";", "}", "</s>"]
["<s>", "public", "boolean", "isAdditiveNumber", "(", "String", "num", ")", "{", "if", "(", "num", ".", "length", "(", ")", "<", "<NUM_LIT:3>", ")", "{", "return", "false", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "=", "num", ".", "length", "(", ")", "/", "<NUM_LIT:2>", ";", "i", "+", "+", ")", "{", "if", "(", "num", ".", "charAt", "(", "0", ")", "=", "=", "<CHAR_LIT:0>", "&", "&", "i", ">", "0", ")", "{", "break", ";", "}", "BigInteger", "x1", "=", "new", "BigInteger", "(", "num", ".", "substring", "(", "0", ",", "i", "+", "1", ")", ")", ";", "for", "(", "int", "j", "=", "i", "+", "1", ";", "Math", ".", "max", "(", "i", ",", "j", "-", "(", "i", "+", "1", ")", ")", "+", "1", "<", "=", "num", ".", "length", "(", ")", "-", "j", "-", "1", ";", "j", "+", "+", ")", "{", "if", "(", "num", ".", "charAt", "(", "i", "+", "1", ")", "=", "=", "<CHAR_LIT:0>", "&", "&", "j", ">", "i", "+", "1", ")", "{", "break", ";", "}", "BigInteger", "x2", "=", "new", "BigInteger", "(", "num", ".", "substring", "(", "i", "+", "1", ",", "j", "+", "1", ")", ")", ";", "if", "(", "isValid", "(", "num", ",", "j", "+", "1", ",", "x1", ",", "x2", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}", "</s>"]
["<s>", "private", "boolean", "isValid", "(", "String", "num", ",", "int", "start", ",", "BigInteger", "x1", ",", "BigInteger", "x2", ")", "{", "if", "(", "start", "=", "=", "num", ".", "length", "(", ")", ")", "{", "return", "true", ";", "}", "BigInteger", "x3", "=", "x1", ".", "add", "(", "x2", ")", ";", "return", "num", ".", "startsWith", "(", "x3", ".", "toString", "(", ")", ",", "start", ")", "&", "&", "isValid", "(", "num", ",", "start", "+", "x3", ".", "toString", "(", ")", ".", "length", "(", ")", ",", "x2", ",", "x3", ")", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "AdditiveNumber", "additiveNumber", "=", "new", "AdditiveNumber", "(", ")", ";", "Assert", ".", "assertTrue", "(", "additiveNumber", ".", "isAdditiveNumber", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertFalse", "(", "additiveNumber", ".", "isAdditiveNumber", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertTrue", "(", "additiveNumber", ".", "isAdditiveNumber", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "void", "insertRecursive", "(", "String", "word", ")", "{", "insertRecursive", "(", "root", ",", "word", ",", "0", ")", ";", "}", "</s>"]
["<s>", "private", "void", "insertRecursive", "(", "TrieNode", "current", ",", "String", "word", ",", "int", "index", ")", "{", "if", "(", "index", "=", "=", "word", ".", "length", "(", ")", ")", "{", "current", ".", "endOfWord", "=", "true", ";", "return", ";", "}", "char", "ch", "=", "word", ".", "charAt", "(", "index", ")", ";", "TrieNode", "node", "=", "current", ".", "children", ".", "get", "(", "ch", ")", ";", "if", "(", "node", "=", "=", "null", ")", "{", "node", "=", "new", "TrieNode", "(", ")", ";", "current", ".", "children", ".", "put", "(", "ch", ",", "node", ")", ";", "}", "insertRecursive", "(", "node", ",", "word", ",", "index", "+", "1", ")", ";", "}", "</s>"]
["<s>", "public", "boolean", "searchRecursive", "(", "String", "word", ")", "{", "return", "searchRecursive", "(", "root", ",", "word", ",", "0", ")", ";", "}", "</s>"]
["<s>", "private", "boolean", "searchRecursive", "(", "TrieNode", "current", ",", "String", "word", ",", "int", "index", ")", "{", "if", "(", "index", "=", "=", "word", ".", "length", "(", ")", ")", "{", "return", "current", ".", "endOfWord", ";", "}", "char", "ch", "=", "word", ".", "charAt", "(", "index", ")", ";", "TrieNode", "node", "=", "current", ".", "children", ".", "get", "(", "ch", ")", ";", "if", "(", "node", "=", "=", "null", ")", "{", "return", "false", ";", "}", "return", "searchRecursive", "(", "node", ",", "word", ",", "index", "+", "1", ")", ";", "}", "</s>"]
["<s>", "public", "void", "delete", "(", "String", "word", ")", "{", "delete", "(", "root", ",", "word", ",", "0", ")", ";", "}", "</s>"]
["<s>", "private", "boolean", "delete", "(", "TrieNode", "current", ",", "String", "word", ",", "int", "index", ")", "{", "if", "(", "index", "=", "=", "word", ".", "length", "(", ")", ")", "{", "if", "(", "!", "current", ".", "endOfWord", ")", "{", "return", "false", ";", "}", "current", ".", "endOfWord", "=", "false", ";", "return", "current", ".", "children", ".", "size", "(", ")", "=", "=", "0", ";", "}", "char", "ch", "=", "word", ".", "charAt", "(", "index", ")", ";", "TrieNode", "node", "=", "current", ".", "children", ".", "get", "(", "ch", ")", ";", "if", "(", "node", "=", "=", "null", ")", "{", "return", "false", ";", "}", "boolean", "shouldDeleteCurrentNode", "=", "delete", "(", "node", ",", "word", ",", "index", "+", "1", ")", ";", "if", "(", "shouldDeleteCurrentNode", ")", "{", "current", ".", "children", ".", "remove", "(", "ch", ")", ";", "return", "current", ".", "children", ".", "size", "(", ")", "=", "=", "0", ";", "}", "return", "false", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "Trie", "trie", "=", "new", "Trie", "(", ")", ";", "trie", ".", "insert", "(", "\"", "<STR_LIT>", "\"", ")", ";", "trie", ".", "insert", "(", "\"", "<STR_LIT>", "\"", ")", ";", "trie", ".", "insertRecursive", "(", "\"", "<STR_LIT>", "\"", ")", ";", "trie", ".", "insertRecursive", "(", "\"", "<STR_LIT>", "\"", ")", ";", "trie", ".", "insert", "(", "\"", "<STR_LIT>", "\"", ")", ";", "trie", ".", "insert", "(", "\"", "<STR_LIT>", "\"", ")", ";", "Assert", ".", "assertFalse", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertFalse", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertTrue", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertFalse", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertTrue", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertFalse", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertTrue", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertFalse", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertTrue", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "trie", ".", "delete", "(", "\"", "<STR_LIT>", "\"", ")", ";", "Assert", ".", "assertTrue", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertFalse", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "trie", ".", "delete", "(", "\"", "<STR_LIT>", "\"", ")", ";", "Assert", ".", "assertFalse", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertTrue", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "trie", ".", "delete", "(", "\"", "<STR_LIT>", "\"", ")", ";", "Assert", ".", "assertFalse", "(", "trie", ".", "search", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "private", "int", "[", "]", "[", "]", "preprocess", "(", "int", "[", "]", "input", ",", "int", "n", ")", "{", "int", "[", "]", "[", "]", "sparse", "=", "new", "int", "[", "n", "]", "[", "log2", "(", "n", ")", "+", "1", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "length", ";", "i", "+", "+", ")", "{", "sparse", "[", "i", "]", "[", "0", "]", "=", "i", ";", "}", "for", "(", "int", "j", "=", "1", ";", "1", "<", "<", "j", "<", "=", "n", ";", "j", "+", "+", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "+", "(", "1", "<", "<", "j", ")", "-", "1", "<", "n", ";", "i", "+", "+", ")", "{", "if", "(", "input", "[", "sparse", "[", "i", "]", "[", "j", "-", "1", "]", "]", "<", "input", "[", "sparse", "[", "i", "+", "(", "1", "<", "<", "(", "j", "-", "1", ")", ")", "]", "[", "j", "-", "1", "]", "]", ")", "{", "sparse", "[", "i", "]", "[", "j", "]", "=", "sparse", "[", "i", "]", "[", "j", "-", "1", "]", ";", "}", "else", "{", "sparse", "[", "i", "]", "[", "j", "]", "=", "sparse", "[", "i", "+", "(", "1", "<", "<", "(", "j", "-", "1", ")", ")", "]", "[", "j", "-", "1", "]", ";", "}", "}", "}", "return", "sparse", ";", "}", "</s>"]
["<s>", "public", "int", "rangeMinimumQuery", "(", "int", "low", ",", "int", "high", ")", "{", "int", "l", "=", "high", "-", "low", "+", "1", ";", "int", "k", "=", "log2", "(", "l", ")", ";", "if", "(", "input", "[", "sparse", "[", "low", "]", "[", "k", "]", "]", "<", "=", "input", "[", "sparse", "[", "low", "+", "l", "-", "(", "1", "<", "<", "k", ")", "]", "[", "k", "]", "]", ")", "{", "return", "input", "[", "sparse", "[", "low", "]", "[", "k", "]", "]", ";", "}", "else", "{", "return", "input", "[", "sparse", "[", "high", "-", "(", "1", "<", "<", "k", ")", "+", "1", "]", "[", "k", "]", "]", ";", "}", "}", "</s>"]
["<s>", "private", "static", "int", "log2", "(", "int", "n", ")", "{", "if", "(", "n", "<", "=", "0", ")", "throw", "new", "IllegalArgumentException", "(", ")", ";", "return", "<NUM_LIT:31>", "-", "Integer", ".", "numberOfLeadingZeros", "(", "n", ")", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "int", "[", "]", "input", "=", "{", "<NUM_LIT:2>", ",", "<NUM_LIT:5>", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:4>", ",", "1", ",", "-", "1", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:4>", ",", "<NUM_LIT:2>", "}", ";", "SparseTableRangeMinimumQuery", "sparseTableRangeMinimumQuery", "=", "new", "SparseTableRangeMinimumQuery", "(", "input", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "length", ";", "i", "+", "+", ")", "{", "for", "(", "int", "j", "=", "i", ";", "j", "<", "input", ".", "length", ";", "j", "+", "+", ")", "{", "System", ".", "out", ".", "print", "(", "sparseTableRangeMinimumQuery", ".", "rangeMinimumQuery", "(", "i", ",", "j", ")", "+", "\"", "\"", ")", ";", "}", "System", ".", "out", ".", "println", "(", ")", ";", "}", "}", "</s>"]
["<s>", "public", "Node", "lowestCommonAncestor", "(", "Node", "root", ",", "int", "p", ",", "int", "q", ")", "{", "if", "(", "root", ".", "data", ">", "Math", ".", "max", "(", "p", ",", "q", ")", ")", "{", "return", "lowestCommonAncestor", "(", "root", ".", "left", ",", "p", ",", "q", ")", ";", "}", "else", "if", "(", "root", ".", "data", "<", "Math", ".", "min", "(", "p", ",", "q", ")", ")", "{", "return", "lowestCommonAncestor", "(", "root", ".", "right", ",", "p", ",", "q", ")", ";", "}", "else", "{", "return", "root", ";", "}", "}", "</s>"]
["<s>", "public", "String", "encode", "(", "List", "<", "String", ">", "strs", ")", "{", "StringBuffer", "buff", "=", "new", "StringBuffer", "(", ")", ";", "for", "(", "String", "str", ":", "strs", ")", "{", "String", "size", "=", "toFixedLength", "(", "str", ".", "length", "(", ")", ")", ";", "buff", ".", "append", "(", "size", ")", ";", "buff", ".", "append", "(", "str", ")", ";", "}", "return", "buff", ".", "toString", "(", ")", ";", "}", "</s>"]
["<s>", "private", "String", "toFixedLength", "(", "int", "len", ")", "{", "StringBuffer", "buff", "=", "new", "StringBuffer", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "<NUM_LIT:4>", ";", "i", "+", "+", ")", "{", "char", "b1", "=", "(", "char", ")", "len", ";", "buff", ".", "append", "(", "b1", ")", ";", "len", "=", "len", ">", ">", "<NUM_LIT:8>", ";", "}", "return", "buff", ".", "toString", "(", ")", ";", "}", "</s>"]
["<s>", "private", "int", "toSize", "(", "String", "str", ")", "{", "int", "val", "=", "0", ";", "for", "(", "int", "i", "=", "str", ".", "length", "(", ")", "-", "1", ";", "i", ">", "0", ";", "i", "-", "-", ")", "{", "val", "+", "=", "str", ".", "charAt", "(", "i", ")", ";", "val", "=", "val", "<", "<", "<NUM_LIT:8>", ";", "}", "val", "+", "=", "str", ".", "charAt", "(", "0", ")", ";", "return", "val", ";", "}", "</s>"]
["<s>", "public", "List", "<", "String", ">", "decode", "(", "String", "s", ")", "{", "List", "<", "String", ">", "result", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "while", "(", "s", ".", "length", "(", ")", "!", "=", "0", ")", "{", "int", "size", "=", "toSize", "(", "s", ".", "substring", "(", "0", ",", "<NUM_LIT:4>", ")", ")", ";", "result", ".", "add", "(", "s", ".", "substring", "(", "<NUM_LIT:4>", ",", "size", "+", "<NUM_LIT:4>", ")", ")", ";", "s", "=", "s", ".", "substring", "(", "size", "+", "<NUM_LIT:4>", ")", ";", "}", "return", "result", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "StringEncoderDecoder", "stringEncoderDecoder", "=", "new", "StringEncoderDecoder", "(", ")", ";", "List", "<", "String", ">", "input", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "input", ".", "add", "(", "\"", "<STR_LIT>", "\"", ")", ";", "input", ".", "add", "(", "\"", "<STR_LIT>", "\"", ")", ";", "input", ".", "add", "(", "\"", "\"", ")", ";", "String", "encoded", "=", "stringEncoderDecoder", ".", "encode", "(", "input", ")", ";", "List", "<", "String", ">", "result", "=", "stringEncoderDecoder", ".", "decode", "(", "encoded", ")", ";", "TestUtil", "<", "String", ">", "testUtil", "=", "new", "TestUtil", "(", ")", ";", "testUtil", ".", "compareList", "(", "input", ",", "result", ")", ";", "}", "</s>"]
["<s>", "public", "boolean", "isPalindrome", "(", "String", "s", ")", "{", "int", "start", "=", "0", ";", "int", "end", "=", "s", ".", "length", "(", ")", "-", "1", ";", "while", "(", "start", "<", "end", ")", "{", "if", "(", "!", "isAlphaNum", "(", "s", ".", "charAt", "(", "start", ")", ")", ")", "{", "start", "+", "+", ";", "}", "else", "if", "(", "!", "isAlphaNum", "(", "s", ".", "charAt", "(", "end", ")", ")", ")", "{", "end", "-", "-", ";", "}", "else", "{", "if", "(", "Character", ".", "toLowerCase", "(", "s", ".", "charAt", "(", "start", "+", "+", ")", ")", "!", "=", "Character", ".", "toLowerCase", "(", "s", ".", "charAt", "(", "end", "-", "-", ")", ")", ")", "{", "return", "false", ";", "}", "}", "}", "return", "true", ";", "}", "</s>"]
["<s>", "private", "boolean", "isAlphaNum", "(", "char", "ch", ")", "{", "if", "(", "(", "ch", ">", "=", "<CHAR_LIT:0>", "&", "&", "ch", "<", "=", "<CHAR_LIT:9>", ")", "|", "|", "(", "ch", ">", "=", "<CHAR_LIT:a>", "&", "&", "ch", "<", "=", "<CHAR_LIT>", ")", "|", "|", "(", "ch", ">", "=", "<CHAR_LIT:A>", "&", "&", "ch", "<", "=", "<CHAR_LIT:Z>", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "ValidPalindrome", "validPalindrome", "=", "new", "ValidPalindrome", "(", ")", ";", "Assert", ".", "assertTrue", "(", "validPalindrome", ".", "isPalindrome", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "Assert", ".", "assertFalse", "(", "validPalindrome", ".", "isPalindrome", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "boolean", "isUnique", "(", "String", "word", ")", "{", "if", "(", "word", ".", "length", "(", ")", "=", "=", "0", "|", "|", "word", ".", "length", "(", ")", "=", "=", "1", ")", "{", "return", "true", ";", "}", "String", "key", "=", "\"", "\"", ";", "int", "len", "=", "0", ";", "if", "(", "word", ".", "length", "(", ")", ">", "0", ")", "{", "key", "=", "word", ".", "charAt", "(", "0", ")", "+", "\"", "\"", "+", "word", ".", "charAt", "(", "word", ".", "length", "(", ")", "-", "1", ")", ";", "len", "=", "word", ".", "length", "(", ")", "-", "<NUM_LIT:2>", ";", "}", "Map", "<", "Integer", ",", "Integer", ">", "set", "=", "map", ".", "get", "(", "key", ")", ";", "if", "(", "set", "=", "=", "null", ")", "{", "return", "true", ";", "}", "Integer", "count", "=", "set", ".", "get", "(", "len", ")", ";", "return", "count", "=", "=", "null", "|", "|", "count", "=", "=", "1", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "String", "[", "]", "dict", "=", "{}", ";", "ValidWordAbbreviation", "validWordAbbreviation", "=", "new", "ValidWordAbbreviation", "(", "dict", ")", ";", "Assert", ".", "assertTrue", "(", "validWordAbbreviation", ".", "isUnique", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "int", "numDecodings", "(", "String", "s", ")", "{", "if", "(", "s", ".", "length", "(", ")", "=", "=", "0", ")", "{", "return", "0", ";", "}", "Map", "<", "Integer", ",", "Integer", ">", "count", "=", "new", "HashMap", "<", ">", "(", ")", ";", "return", "numDecodingsUtil", "(", "s", ",", "0", ",", "count", ")", ";", "}", "</s>"]
["<s>", "public", "int", "numDecodingsUtil", "(", "String", "s", ",", "int", "start", ",", "Map", "<", "Integer", ",", "Integer", ">", "count", ")", "{", "if", "(", "s", ".", "length", "(", ")", "=", "=", "start", ")", "{", "return", "1", ";", "}", "if", "(", "count", ".", "containsKey", "(", "start", ")", ")", "{", "return", "count", ".", "get", "(", "start", ")", ";", "}", "String", "s1", "=", "s", ".", "substring", "(", "start", ",", "start", "+", "1", ")", ";", "if", "(", "s1", ".", "equals", "(", "\"", "<STR_LIT:0>", "\"", ")", ")", "{", "count", ".", "put", "(", "start", ",", "0", ")", ";", "return", "0", ";", "}", "int", "c1", "=", "numDecodingsUtil", "(", "s", ",", "start", "+", "1", ",", "count", ")", ";", "int", "c2", "=", "0", ";", "if", "(", "start", "<", "s", ".", "length", "(", ")", "-", "1", ")", "{", "s1", "=", "s", ".", "substring", "(", "start", ",", "start", "+", "<NUM_LIT:2>", ")", ";", "if", "(", "Integer", ".", "valueOf", "(", "s1", ")", "<", "=", "<NUM_LIT>", ")", "{", "c2", "=", "numDecodingsUtil", "(", "s", ",", "start", "+", "<NUM_LIT:2>", ",", "count", ")", ";", "}", "}", "count", ".", "put", "(", "start", ",", "c1", "+", "c2", ")", ";", "return", "c1", "+", "c2", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "DecodeWays", "decodeWays", "=", "new", "DecodeWays", "(", ")", ";", "System", ".", "out", ".", "println", "(", "decodeWays", ".", "numDecodings", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "Node", "deleteDuplicates", "(", "Node", "head", ")", "{", "Node", "dummyNode", "=", "new", "Node", "(", ")", ";", "dummyNode", ".", "next", "=", "head", ";", "Node", "current", "=", "head", ";", "Node", "prev", "=", "dummyNode", ";", "while", "(", "current", "!", "=", "null", ")", "{", "while", "(", "current", ".", "next", "!", "=", "null", "&", "&", "current", ".", "data", "=", "=", "current", ".", "next", ".", "data", ")", "{", "current", "=", "current", ".", "next", ";", "}", "if", "(", "prev", ".", "next", "=", "=", "current", ")", "{", "prev", "=", "current", ";", "}", "else", "{", "prev", ".", "next", "=", "current", ".", "next", ";", "}", "current", "=", "current", ".", "next", ";", "}", "return", "dummyNode", ".", "next", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "DeleteDuplicateNodes", "deleteDuplicateNodes", "=", "new", "DeleteDuplicateNodes", "(", ")", ";", "LinkList", "linkList", "=", "new", "LinkList", "(", ")", ";", "Node", "node", "=", "null", ";", "node", "=", "linkList", ".", "addNode", "(", "1", ",", "node", ")", ";", "node", "=", "linkList", ".", "addNode", "(", "<NUM_LIT:2>", ",", "node", ")", ";", "node", "=", "linkList", ".", "addNode", "(", "<NUM_LIT:2>", ",", "node", ")", ";", "deleteDuplicateNodes", ".", "deleteDuplicates", "(", "node", ")", ";", "}", "</s>"]
["<s>", "public", "int", "minMeetingRooms1", "(", "Interval", "[", "]", "intervals", ")", "{", "int", "[", "]", "start", "=", "new", "int", "[", "intervals", ".", "length", "]", ";", "int", "[", "]", "end", "=", "new", "int", "[", "intervals", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "intervals", ".", "length", ";", "i", "+", "+", ")", "{", "start", "[", "i", "]", "=", "intervals", "[", "i", "]", ".", "start", ";", "end", "[", "i", "]", "=", "intervals", "[", "i", "]", ".", "end", ";", "}", "Arrays", ".", "sort", "(", "start", ")", ";", "Arrays", ".", "sort", "(", "end", ")", ";", "int", "j", "=", "0", ";", "int", "rooms", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "start", ".", "length", ";", "i", "+", "+", ")", "{", "if", "(", "start", "[", "i", "]", "<", "end", "[", "j", "]", ")", "{", "rooms", "+", "+", ";", "}", "else", "{", "j", "+", "+", ";", "}", "}", "return", "rooms", ";", "}", "</s>"]
["<s>", "public", "int", "minMeetingRooms", "(", "Interval", "[", "]", "intervals", ")", "{", "if", "(", "intervals", ".", "length", "=", "=", "0", ")", "{", "return", "0", ";", "}", "Arrays", ".", "sort", "(", "intervals", ",", "(", "a", ",", "b", ")", "-", ">", "a", ".", "start", "-", "b", ".", "start", ")", ";", "PriorityQueue", "<", "Interval", ">", "pq", "=", "new", "PriorityQueue", "<", ">", "(", "(", "a", ",", "b", ")", "-", ">", "a", ".", "end", "-", "b", ".", "end", ")", ";", "pq", ".", "offer", "(", "intervals", "[", "0", "]", ")", ";", "int", "rooms", "=", "1", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "intervals", ".", "length", ";", "i", "+", "+", ")", "{", "Interval", "it", "=", "pq", ".", "poll", "(", ")", ";", "if", "(", "it", ".", "end", "<", "=", "intervals", "[", "i", "]", ".", "start", ")", "{", "it", "=", "new", "Interval", "(", "it", ".", "start", ",", "intervals", "[", "i", "]", ".", "end", ")", ";", "}", "else", "{", "rooms", "+", "+", ";", "pq", ".", "offer", "(", "intervals", "[", "i", "]", ")", ";", "}", "pq", ".", "offer", "(", "it", ")", ";", "}", "return", "rooms", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "MeetingRooms", "meetingRooms", "=", "new", "MeetingRooms", "(", ")", ";", "MeetingRooms", ".", "Interval", "[", "]", "interval", "=", "new", "MeetingRooms", ".", "Interval", "[", "<NUM_LIT:4>", "]", ";", "interval", "[", "0", "]", "=", "new", "MeetingRooms", ".", "Interval", "(", "0", ",", "<NUM_LIT:3>", ")", ";", "interval", "[", "1", "]", "=", "new", "MeetingRooms", ".", "Interval", "(", "<NUM_LIT:2>", ",", "<NUM_LIT:5>", ")", ";", "interval", "[", "<NUM_LIT:2>", "]", "=", "new", "MeetingRooms", ".", "Interval", "(", "<NUM_LIT:6>", ",", "<NUM_LIT:8>", ")", ";", "interval", "[", "<NUM_LIT:3>", "]", "=", "new", "MeetingRooms", ".", "Interval", "(", "<NUM_LIT:8>", ",", "<NUM_LIT:10>", ")", ";", "Assert", ".", "assertEquals", "(", "<NUM_LIT:2>", ",", "meetingRooms", ".", "minMeetingRooms", "(", "interval", ")", ")", ";", "Assert", ".", "assertEquals", "(", "<NUM_LIT:2>", ",", "meetingRooms", ".", "minMeetingRooms1", "(", "interval", ")", ")", ";", "}", "</s>"]
["<s>", "public", "Node", "inorderSuccessor", "(", "Node", "root", ",", "Node", "p", ")", "{", "if", "(", "p", ".", "right", "!", "=", "null", ")", "{", "p", "=", "p", ".", "right", ";", "while", "(", "p", ".", "left", "!", "=", "null", ")", "{", "p", "=", "p", ".", "left", ";", "}", "return", "p", ";", "}", "else", "{", "return", "succ", "(", "root", ",", "p", ".", "data", ")", ";", "}", "}", "</s>"]
["<s>", "private", "Node", "succ", "(", "Node", "root", ",", "int", "data", ")", "{", "if", "(", "root", ".", "data", "=", "=", "data", ")", "{", "return", "null", ";", "}", "if", "(", "root", ".", "data", "<", "data", ")", "{", "return", "succ", "(", "root", ".", "right", ",", "data", ")", ";", "}", "else", "{", "Node", "s", "=", "succ", "(", "root", ".", "left", ",", "data", ")", ";", "return", "s", "=", "=", "null", "?", "root", ":", "s", ";", "}", "}", "</s>"]
["<s>", "public", "int", "[", "]", "findOrder", "(", "int", "numCourses", ",", "int", "[", "]", "[", "]", "prerequisites", ")", "{", "boolean", "[", "]", "used", "=", "new", "boolean", "[", "numCourses", "]", ";", "Neighbors", "[", "]", "graph", "=", "new", "Neighbors", "[", "numCourses", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "graph", ".", "length", ";", "i", "+", "+", ")", "{", "graph", "[", "i", "]", "=", "new", "Neighbors", "(", ")", ";", "}", "for", "(", "int", "[", "]", "tuple", ":", "prerequisites", ")", "{", "graph", "[", "tuple", "[", "1", "]", "]", ".", "neighbor", ".", "add", "(", "tuple", "[", "0", "]", ")", ";", "}", "Deque", "<", "Integer", ">", "stack", "=", "new", "LinkedList", "<", ">", "(", ")", ";", "boolean", "[", "]", "dfs", "=", "new", "boolean", "[", "numCourses", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "numCourses", ";", "i", "+", "+", ")", "{", "if", "(", "topSort", "(", "i", ",", "graph", ",", "used", ",", "stack", ",", "dfs", ")", ")", "{", "return", "new", "int", "[", "0", "]", ";", "}", "}", "int", "[", "]", "output", "=", "new", "int", "[", "numCourses", "]", ";", "int", "index", "=", "0", ";", "while", "(", "!", "stack", ".", "isEmpty", "(", ")", ")", "{", "output", "[", "index", "+", "+", "]", "=", "stack", ".", "pollFirst", "(", ")", ";", "}", "return", "output", ";", "}", "</s>"]
["<s>", "private", "boolean", "topSort", "(", "int", "course", ",", "Neighbors", "[", "]", "graph", ",", "boolean", "[", "]", "used", ",", "Deque", "<", "Integer", ">", "stack", ",", "boolean", "[", "]", "dfs", ")", "{", "if", "(", "used", "[", "course", "]", ")", "{", "return", "false", ";", "}", "if", "(", "dfs", "[", "course", "]", ")", "{", "return", "true", ";", "}", "dfs", "[", "course", "]", "=", "true", ";", "for", "(", "int", "adj", ":", "graph", "[", "course", "]", ".", "neighbor", ")", "{", "if", "(", "topSort", "(", "adj", ",", "graph", ",", "used", ",", "stack", ",", "dfs", ")", ")", "{", "return", "true", ";", "}", "}", "dfs", "[", "course", "]", "=", "false", ";", "used", "[", "course", "]", "=", "true", ";", "stack", ".", "offerFirst", "(", "course", ")", ";", "return", "false", ";", "}", "</s>"]
["<s>", "@", "Test", "public", "void", "testDifferentCases", "(", ")", "{", "CourseSchedule", "cs", "=", "new", "CourseSchedule", "(", ")", ";", "int", "[", "]", "[", "]", "courses", "=", "{", "{", "1", ",", "0", "}", ",", "{", "<NUM_LIT:2>", ",", "0", "}", ",", "{", "<NUM_LIT:3>", ",", "1", "}", ",", "{", "<NUM_LIT:3>", ",", "<NUM_LIT:2>", "}", "}", ";", "int", "[", "]", "output", "=", "cs", ".", "findOrder", "(", "<NUM_LIT:4>", ",", "courses", ")", ";", "int", "[", "]", "expected", "=", "{", "0", ",", "<NUM_LIT:2>", ",", "1", ",", "<NUM_LIT:3>", "}", ";", "Assert", ".", "assertArrayEquals", "(", "expected", ",", "output", ")", ";", "int", "[", "]", "[", "]", "courses1", "=", "{", "{", "1", ",", "0", "}", ",", "{", "<NUM_LIT:2>", ",", "0", "}", ",", "{", "<NUM_LIT:3>", ",", "1", "}", ",", "{", "<NUM_LIT:3>", ",", "<NUM_LIT:2>", "}", ",", "{", "0", ",", "<NUM_LIT:3>", "}", "}", ";", "int", "[", "]", "output1", "=", "cs", ".", "findOrder", "(", "<NUM_LIT:4>", ",", "courses1", ")", ";", "int", "[", "]", "expected1", "=", "{", "}", ";", "Assert", ".", "assertArrayEquals", "(", "expected1", ",", "output1", ")", ";", "}", "</s>"]
["<s>", "public", "int", "maxPathSum", "(", "Node", "root", ")", "{", "max", "=", "Integer", ".", "MIN_VALUE", ";", "maxPathSumUtil", "(", "root", ")", ";", "return", "max", ";", "}", "</s>"]
["<s>", "private", "int", "maxPathSumUtil", "(", "Node", "root", ")", "{", "if", "(", "root", "=", "=", "null", ")", "{", "return", "0", ";", "}", "int", "left", "=", "maxPathSumUtil", "(", "root", ".", "left", ")", ";", "int", "right", "=", "maxPathSumUtil", "(", "root", ".", "right", ")", ";", "if", "(", "left", "<", "0", ")", "{", "left", "=", "0", ";", "}", "if", "(", "right", "<", "0", ")", "{", "right", "=", "0", ";", "}", "max", "=", "Math", ".", "max", "(", "max", ",", "root", ".", "data", "+", "left", "+", "right", ")", ";", "return", "root", ".", "data", "+", "Math", ".", "max", "(", "left", ",", "right", ")", ";", "}", "</s>"]
["<s>", "public", "int", "hIndex", "(", "int", "[", "]", "citations", ")", "{", "int", "[", "]", "count", "=", "new", "int", "[", "citations", ".", "length", "+", "1", "]", ";", "for", "(", "int", "c", ":", "citations", ")", "{", "if", "(", "c", "<", "=", "citations", ".", "length", ")", "{", "count", "[", "c", "]", "+", "+", ";", "}", "else", "{", "count", "[", "citations", ".", "length", "]", "+", "+", ";", "}", "}", "int", "sum", "=", "0", ";", "int", "max", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "count", ".", "length", ";", "i", "+", "+", ")", "{", "sum", "+", "=", "count", "[", "i", "]", ";", "int", "p", "=", "citations", ".", "length", "-", "sum", "+", "count", "[", "i", "]", ";", "if", "(", "i", "<", "=", "p", ")", "{", "max", "=", "i", ";", "}", "}", "return", "max", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "HIndex", "hi", "=", "new", "HIndex", "(", ")", ";", "int", "[", "]", "input", "=", "{", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "<NUM_LIT:6>", ",", "<NUM_LIT:7>", ",", "<NUM_LIT:8>", "}", ";", "System", ".", "out", ".", "print", "(", "hi", ".", "hIndex", "(", "input", ")", ")", ";", "}", "</s>"]
["<s>", "public", "int", "lengthOfLongestSubstringTwoDistinct", "(", "String", "s", ")", "{", "int", "count1", "=", "0", ";", "int", "count2", "=", "0", ";", "char", "c1", "=", "0", ";", "char", "c2", "=", "0", ";", "int", "start", "=", "0", ";", "int", "current", "=", "0", ";", "int", "max", "=", "0", ";", "for", "(", "char", "ch", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "if", "(", "ch", "=", "=", "c1", "|", "|", "ch", "=", "=", "c2", ")", "{", "if", "(", "ch", "=", "=", "c1", ")", "{", "count1", "+", "+", ";", "}", "else", "{", "count2", "+", "+", ";", "}", "}", "else", "{", "if", "(", "count1", "!", "=", "0", "&", "&", "count2", "!", "=", "0", ")", "{", "while", "(", "start", "<", "current", ")", "{", "if", "(", "s", ".", "charAt", "(", "start", ")", "=", "=", "c1", ")", "{", "count1", "-", "-", ";", "}", "else", "if", "(", "s", ".", "charAt", "(", "start", ")", "=", "=", "c2", ")", "{", "count2", "-", "-", ";", "}", "start", "+", "+", ";", "if", "(", "count1", "=", "=", "0", "|", "|", "count2", "=", "=", "0", ")", "{", "break", ";", "}", "}", "}", "if", "(", "count1", "=", "=", "0", ")", "{", "c1", "=", "ch", ";", "count1", "=", "1", ";", "}", "else", "{", "c2", "=", "ch", ";", "count2", "=", "1", ";", "}", "}", "max", "=", "Math", ".", "max", "(", "max", ",", "current", "-", "start", "+", "1", ")", ";", "current", "+", "+", ";", "}", "return", "max", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "LongestSubstringWithAtMost2Char", "lc", "=", "new", "LongestSubstringWithAtMost2Char", "(", ")", ";", "System", ".", "out", ".", "print", "(", "lc", ".", "lengthOfLongestSubstringTwoDistinct", "(", "\"", "<STR_LIT>", "\"", ")", ")", ";", "}", "</s>"]
["<s>", "public", "boolean", "isSelfCrossing", "(", "int", "[", "]", "x", ")", "{", "if", "(", "x", ".", "length", "<", "<NUM_LIT:4>", ")", "{", "return", "false", ";", "}", "int", "v1", "=", "-", "x", "[", "0", "]", ";", "int", "v2", "=", "-", "x", "[", "1", "]", ";", "int", "i", "=", "<NUM_LIT:2>", ";", "while", "(", "i", "<", "x", ".", "length", ")", "{", "if", "(", "i", "%", "<NUM_LIT:2>", "=", "=", "0", ")", "{", "if", "(", "i", "%", "<NUM_LIT:4>", "=", "=", "0", ")", "{", "v1", "-", "=", "x", "[", "i", "]", ";", "}", "else", "{", "v1", "+", "=", "x", "[", "i", "]", ";", "}", "}", "else", "{", "if", "(", "(", "i", "+", "1", ")", "%", "<NUM_LIT:4>", "=", "=", "0", ")", "{", "v2", "+", "=", "x", "[", "i", "]", ";", "}", "else", "{", "v2", "-", "=", "x", "[", "i", "]", ";", "}", "}", "if", "(", "i", "%", "<NUM_LIT:2>", "!", "=", "0", ")", "{", "if", "(", "(", "v1", ">", "=", "0", "&", "&", "v2", "<", "=", "0", ")", "|", "|", "(", "v1", "<", "=", "0", "&", "&", "v2", ">", "=", "0", ")", ")", "{", "return", "true", ";", "}", "}", "i", "+", "+", ";", "}", "return", "false", ";", "}", "</s>"]
["<s>", "public", "static", "void", "main", "(", "String", "args", "[", "]", ")", "{", "SelfCrossing", "sc", "=", "new", "SelfCrossing", "(", ")", ";", "int", "input", "[", "]", "=", "{", "<NUM_LIT:3>", ",", "<NUM_LIT:3>", ",", "<NUM_LIT:4>", ",", "<NUM_LIT:2>", ",", "<NUM_LIT:2>", "}", ";", "System", ".", "out", ".", "print", "(", "sc", ".", "isSelfCrossing", "(", "input", ")", ")", ";", "}", "</s>"]
["<s>", "public", "int", "threeSumSmaller", "(", "int", "[", "]", "nums", ",", "int", "target", ")", "{", "if", "(", "nums", ".", "length", "<", "<NUM_LIT:3>", ")", "{", "return", "0", ";", "}", "Arrays", ".", "sort", "(", "nums", ")", ";", "int", "count", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "nums", ".", "length", ";", "i", "+", "+", ")", "{", "int", "j", "=", "i", "+", "1", ";", "int", "k", "=", "nums", ".", "length", "-", "1", ";", "while", "(", "j", "<", "k", ")", "{", "if", "(", "nums", "[", "i", "]", "+", "nums", "[", "j", "]", "+", "nums", "[", "k", "]", ">", "=", "target", ")", "{", "k", "-", "-", ";", "}", "else", "{", "count", "+", "=", "k", "-", "j", ";", "j", "+", "+", ";", "}", "}", "}", "return", "count", ";", "}", "</s>"]
["<s>", "public", "int", "maxArea", "(", "int", "[", "]", "height", ")", "{", "int", "i", "=", "0", ";", "int", "j", "=", "height", ".", "length", "-", "1", ";", "int", "maxArea", "=", "0", ";", "while", "(", "i", "<", "j", ")", "{", "if", "(", "height", "[", "i", "]", "<", "height", "[", "j", "]", ")", "{", "maxArea", "=", "Math", ".", "max", "(", "maxArea", ",", "(", "height", "[", "i", "]", ")", "*", "(", "j", "-", "i", ")", ")", ";", "i", "+", "+", ";", "}", "else", "{", "maxArea", "=", "Math", ".", "max", "(", "maxArea", ",", "height", "[", "j", "]", "*", "(", "j", "-", "i", ")", ")", ";", "j", "-", "-", ";", "}", "}", "return", "maxArea", ";", "}", "</s>"]
["<s>", "public", "int", "findMin", "(", "int", "[", "]", "nums", ")", "{", "int", "low", "=", "0", ";", "int", "high", "=", "nums", ".", "length", "-", "1", ";", "while", "(", "low", "<", "high", ")", "{", "int", "middle", "=", "(", "low", "+", "high", ")", "/", "<NUM_LIT:2>", ";", "if", "(", "(", "middle", "=", "=", "0", "|", "|", "nums", "[", "middle", "]", "<", "nums", "[", "middle", "-", "1", "]", ")", "&", "&", "(", "middle", "=", "=", "nums", ".", "length", "-", "1", "|", "|", "nums", "[", "middle", "]", "<", "nums", "[", "middle", "+", "1", "]", ")", ")", "{", "return", "nums", "[", "middle", "]", ";", "}", "else", "if", "(", "nums", "[", "middle", "]", ">", "nums", "[", "high", "]", ")", "{", "low", "=", "middle", "+", "1", ";", "}", "else", "{", "high", "=", "middle", "-", "1", ";", "}", "}", "return", "nums", "[", "low", "]", ";", "}", "</s>"]
["<s>", "public", "int", "searchInsert", "(", "int", "[", "]", "nums", ",", "int", "target", ")", "{", "int", "low", "=", "0", ";", "int", "high", "=", "nums", ".", "length", "-", "1", ";", "while", "(", "low", "<", "=", "high", ")", "{", "int", "middle", "=", "(", "low", "+", "high", ")", "/", "<NUM_LIT:2>", ";", "if", "(", "nums", "[", "middle", "]", "=", "=", "target", ")", "{", "return", "middle", ";", "}", "if", "(", "nums", "[", "middle", "]", "<", "target", "&", "&", "(", "middle", "=", "=", "nums", ".", "length", "-", "1", "|", "|", "nums", "[", "middle", "+", "1", "]", ">", "target", ")", ")", "{", "return", "middle", "+", "1", ";", "}", "if", "(", "nums", "[", "middle", "]", "<", "target", ")", "{", "low", "=", "middle", "+", "1", ";", "}", "else", "{", "high", "=", "middle", "-", "1", ";", "}", "}", "return", "0", ";", "}", "</s>"]
["<s>", "public", "int", "mySqrt", "(", "int", "x", ")", "{", "if", "(", "x", "=", "=", "0", ")", "return", "0", ";", "int", "left", "=", "1", ",", "right", "=", "x", ";", "while", "(", "true", ")", "{", "int", "mid", "=", "left", "+", "(", "right", "-", "left", ")", "/", "<NUM_LIT:2>", ";", "if", "(", "mid", ">", "x", "/", "mid", ")", "{", "right", "=", "mid", "-", "1", ";", "}", "else", "{", "if", "(", "mid", "+", "1", ">", "x", "/", "(", "mid", "+", "1", ")", ")", "return", "mid", ";", "left", "=", "mid", "+", "1", ";", "}", "}", "}", "</s>"]
["<s>", "public", "int", "numSquares", "(", "int", "n", ")", "{", "int", "count", "=", "(", "int", ")", "Math", ".", "ceil", "(", "Math", ".", "sqrt", "(", "n", ")", ")", ";", "int", "[", "]", "T", "=", "new", "int", "[", "n", "+", "1", "]", ";", "T", "[", "0", "]", "=", "0", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "T", ".", "length", ";", "i", "+", "+", ")", "{", "T", "[", "i", "]", "=", "Integer", ".", "MAX_VALUE", ";", "for", "(", "int", "j", "=", "1", ";", "j", "<", "=", "count", ";", "j", "+", "+", ")", "{", "if", "(", "i", "<", "j", "*", "j", ")", "{", "break", ";", "}", "T", "[", "i", "]", "=", "Math", ".", "min", "(", "T", "[", "i", "]", ",", "T", "[", "i", "-", "j", "*", "j", "]", "+", "1", ")", ";", "}", "}", "return", "T", "[", "n", "]", ";", "}", "</s>"]
["<s>", "public", "int", "minimumTotal", "(", "List", "<", "List", "<", "Integer", ">", ">", "triangle", ")", "{", "int", "n", "=", "triangle", ".", "size", "(", ")", ";", "int", "[", "]", "dp", "=", "new", "int", "[", "n", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "triangle", ".", "get", "(", "n", "-", "1", ")", ".", "size", "(", ")", ";", "i", "+", "+", ")", "{", "dp", "[", "i", "]", "=", "triangle", ".", "get", "(", "n", "-", "1", ")", ".", "get", "(", "i", ")", ";", "}", "for", "(", "int", "i", "=", "triangle", ".", "size", "(", ")", "-", "<NUM_LIT:2>", ";", "i", ">", "=", "0", ";", "i", "-", "-", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "triangle", ".", "get", "(", "i", ")", ".", "size", "(", ")", ";", "j", "+", "+", ")", "{", "dp", "[", "j", "]", "=", "triangle", ".", "get", "(", "i", ")", ".", "get", "(", "j", ")", "+", "Math", ".", "min", "(", "dp", "[", "j", "]", ",", "dp", "[", "j", "+", "1", "]", ")", ";", "}", "}", "return", "dp", "[", "0", "]", ";", "}", "</s>"]
